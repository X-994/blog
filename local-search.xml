<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++学习</title>
    <link href="/2024/09/19/c++Study/"/>
    <url>/2024/09/19/c++Study/</url>
    
    <content type="html"><![CDATA[<h1 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h1><p>c++将内存大方向划分为4个区域</p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放，存放函数的参数值，局本部变量等</li><li>堆区：有程序员分配和释放，结束时有操作系统回收</li></ul><p><strong>内存四区的意义</strong><br>不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程</p><p><strong>代码区：</strong><br>存放cpu的机器指令<br>代码区是共享的<br>代码区是只读的</p><p><strong>全局区：</strong><br>全局变量和变量存放在此<br>还包含了常量区，字符串常量和其他常量也存放在这<br>该区数据在程序结束后有操作系统释放</p><p><strong>结论：</strong></p><ul><li>代码区和全局区都是程序运行前</li><li>代码区的特点是共享和只读</li><li>全局区中存放全局变量，静态变量，常量</li><li>常量区中存放const修饰的全局常量和字符串常量</li></ul><p><strong>栈区</strong><br>由编译器自动分配释放，存放函数的参数值，局本部变量等<br>不要返回局部变量的地址，栈区开辟的数据编译器会自动释放</p><p><strong>堆区</strong><br>有程序员分配和释放，结束时有操作系统回收<br>在c++中主要利用new在堆区中开辟内存<br>指针本质上也是局部变量，放在栈上，指针保存的数据是放在堆区的</p><p><strong>结论</strong></p><ul><li>栈区和堆区都是程序运行后</li><li>堆区数据是由管理员开辟和释放</li><li>堆区数据利用new关键字进行开辟内春</li></ul><h2 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h2><p>堆区数据是由管理员开辟和释放，释放用利用操作符delete</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std<br> //1在堆区创建整数<br>int * func()&#123;<br>    //new返回该数据类型的指针<br>    int * p = new int (10);<br>    retrun p;<br>&#125;<br>int tesr01&#123;<br>    int *p = func();<br>    count &lt;&lt; *p &lt;&lt; endl;  //10<br>    count &lt;&lt; *p &lt;&lt; endl;  //10<br>    count &lt;&lt; *p &lt;&lt; endl;  //10<br>    //堆区数据是由管理员开辟和释放<br>    //想释放数据，利用关键字delete<br>    delete p;<br>    count &lt;&lt; *p &lt;&lt; endl; // 内存已经被释放，再次访问就是非法操作，会报错<br>&#125;<br>    //2.在堆区开辟利用new开辟数组<br>void test2&#123;<br>    <br>    ingt* arr = new int[10];<br>    for(int i =0; i&lt; 10; i++)<br>        arr[i] = i + 1;<br>     ingt* arr = new int[10];<br>    for(int i =0; i&lt; 10; i++)<br>        cout &lt;&lt; arr[i] &lt;&lt; endl; <br>    //释放数组时，要加[]才可以<br>    delete[] arr；<br>&#125;<br>int mian()&#123;<br>    test01();<br>    test02();<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="引用的基本使用"><a href="#引用的基本使用" class="headerlink" title="引用的基本使用"></a>引用的基本使用</h2><p><strong>作用</strong>:给变量起别名<br><strong>语法</strong>:数据类型 &amp;别名 &#x3D; 原名</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs [c++]"># include &lt;iostream&gt;<br>using namespace std<br>int main()&#123;<br>    int &amp;b = a;<br>    b =20 ;<br>    cout &lt;&lt; a &lt;&lt; endl; //输出等于20<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用的注意事项"><a href="#引用的注意事项" class="headerlink" title="引用的注意事项"></a>引用的注意事项</h2><ul><li>引用必须要初始化<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs [c++]bush">int &amp;b; //这样是错误的<br></code></pre></td></tr></table></figure></li><li>引用初始化后就不可以更改了</li></ul><h2 id="引用做函数参数"><a href="#引用做函数参数" class="headerlink" title="引用做函数参数"></a>引用做函数参数</h2><p><strong>作用</strong>: 函数传参时，可以利用引用的技术让形参修饰实参<br><strong>优秀</strong>:可以简化指针修改实参</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br><br>//引用传递<br>void myswap(int &amp;a,int &amp;b)&#123;<br>    int temp=a;<br>    a=b;<br>    b=temp;<br>&#125;<br><br>int main()&#123;<br>    int a=10;<br>    int b=20;<br>    myswap(a,b);  //引用传递，形参会修饰实参的<br>    cout&lt;&lt;&quot;a= &quot;&lt;&lt;a&lt;&lt;endl;<br>    cout&lt;&lt;&quot;b= &quot;&lt;&lt;b&lt;&lt;endl;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用做函数返回值"><a href="#引用做函数返回值" class="headerlink" title="引用做函数返回值"></a>引用做函数返回值</h2><p><strong>作用</strong>：引用是可以作为函数的返回值存在的<br><strong>注意</strong>：不要返回局部变量引用<br><strong>用法</strong>：函数调用作为左值</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br><br>//不要返回局部变量引用<br>int&amp; test01()&#123;<br>    int a=10;//局部变量存放在栈区<br>    return a;<br>&#125;<br>//函数的调用可以作为左值<br>int&amp; test02()&#123;<br>    static int a=10; //静态变量，存放在全局区，全局区上的数据在程序结束后系统释放<br>    return a;<br>&#125;<br><br>int main()&#123;<br>    int &amp;ref=test01(); //非法操作<br>    cout&lt;&lt;&quot;ref= &quot;&lt;&lt;ref&lt;&lt;endl;//第一次结果正确是编译器做了保留<br>    cout&lt;&lt;&quot;ref= &quot;&lt;&lt;ref&lt;&lt;endl;//第二次结果错误是因为a的内存已经释放<br>    int &amp;ref2=test02();<br>    cout&lt;&lt;&quot;ref2= &quot;&lt;&lt;ref2&lt;&lt;endl;//输出10<br>    cout&lt;&lt;&quot;ref2= &quot;&lt;&lt;ref2&lt;&lt;endl;<br>    test02()=1000; //如果函数的返回值是引用，这个函数的调用可以作为左值  相当于 &amp;a = 1000;<br>    cout&lt;&lt;&quot;ref2= &quot;&lt;&lt;ref2&lt;&lt;endl;//输出1000<br>    cout&lt;&lt;&quot;ref2= &quot;&lt;&lt;ref2&lt;&lt;endl;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用的本质"><a href="#引用的本质" class="headerlink" title="引用的本质"></a>引用的本质</h2><p><strong>本质</strong>：引用的本质在C++内部实现是一个指针常量</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br><br>//发现是引用，转换为int* const ref=&amp;a;<br>void func(int&amp; ref)&#123;<br>    ref=100;//ref是引用，转换为*ref=100<br>&#125;<br><br>int main()&#123;<br>    int a=10;<br>    //自动转换为int* const ref=&amp;a;指针常量是指针指向不可改，也说明为什么引用不可更改<br>    int&amp; ref=a;<br>    ref=20; //内部发现ref是引用，自动帮我们转换为：*ref=20;<br>    cout&lt;&lt;&quot;a:&quot;&lt;&lt;a&lt;&lt;endl;<br>    cout&lt;&lt;&quot;ref:&quot;&lt;&lt;ref&lt;&lt;endl;<br>    func(a);<br>    return 0;<br>&#125;<br>总结：C++推荐使用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了<br></code></pre></td></tr></table></figure><h2 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h2><p><strong>作用</strong>：常量引用主要用来修饰形参，防止误操作<br>在函数形参列表中，可以加const修饰形参，防止形参改变实参</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br>//打印数据函数<br>void showValue(const int &amp;val)&#123;<br>    //val=1000;   如果没加上const，外面的a也会更改<br>    //加上了const，上段代码就会报错<br>    cout&lt;&lt;&quot;val= &quot;&lt;&lt;val&lt;&lt;endl;<br>&#125;<br><br>int main()&#123;<br>    //常量引用<br>    int &amp;ref=10;//错误，引用必须引一块合法的内存空间<br>    //加上const之后，编译器将代码修改为 int temp=10; const int &amp;ref=temp;<br>    const int &amp;ref=10;//正确<br>    //使用场景：用来修饰形参，防止误操作<br>    int a=100;<br>    showValue(a);<br>    cout&lt;&lt;&quot;a= &quot;&lt;&lt;a&lt;&lt;endl;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="函数的提高"><a href="#函数的提高" class="headerlink" title="函数的提高"></a>函数的提高</h1><h2 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h2><p>在C++中，函数的形参列表中的形参是可以有默认值的。<br><strong>语法</strong>：返回值类型 函数名 (参数 &#x3D; 默认值){}<br><strong>注意事项</strong>：</p><ul><li>如果某个位置已经有了默认参数，那么从这个位置往后，从左向右的形参都必须要有默认参数</li><li>声明和实现只能有一个有默认参数<figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br>int func(int a,int b=20,int c=30,)<br>//函数默认参数<br>int func(int a,int b,int c)&#123;<br>    return a+b+c;<br>&#125;<br><br>int main()&#123;<br>    cout&lt;&lt;func(10)&lt;&lt;endl;//有默认值可以只传没有默认值的形参<br>    cout&lt;&lt;func(10,30)&lt;&lt;endl;//如果自己传入数据，就用自己的数据<br>    <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="函数占位参数"><a href="#函数占位参数" class="headerlink" title="函数占位参数"></a>函数占位参数</h2><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置<br><strong>语法</strong>:返回值类型 函数名(数据类型){}</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br><br>void func(int a,int)&#123;<br>    cout&lt;&lt;&quot;this is func&quot;&lt;&lt;endl;<br>&#125;<br><br>//占位参数还可以默认参数<br>void func1(int a,int =10)&#123;<br>    cout&lt;&lt;&quot;this is func1&quot;&lt;&lt;endl;<br>&#125;<br><br>int main()&#123;<br>func(10,10);<br>    func1(10);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>作用：函数名可以相同，提高复用性<br>函数重载满足条件：</p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数类型不同或者个数不同或者顺序不同</li><li>注意：函数的返回值类型不可以作为函数重载的条件<br>例如：函数func返回值类型为int，而还有一个func函数返回值为void，这个时候编译器会报错！<figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br>//函数重载需要在同一个作用域中<br>void func()&#123;<br>    cout&lt;&lt;&quot;func的调用&quot;&lt;&lt;endl;<br>&#125;<br><br>//个数不同<br>void func(int a)&#123;<br>    cout&lt;&lt;&quot;func(int a)的调用&quot;&lt;&lt;endl;<br>&#125;<br><br>//参数类型不同<br>void func(double a)&#123;<br>    cout&lt;&lt;&quot;func(double a)的调用&quot;&lt;&lt;endl;<br>&#125;<br><br>//顺序不同<br>void func(int a,double b)&#123;<br>    cout&lt;&lt;&quot;func(int a,double b)的调用&quot;&lt;&lt;endl;<br>&#125;<br><br>void func(double a,int b)&#123;<br>    cout&lt;&lt;&quot;func(double a,int b)的调用&quot;&lt;&lt;endl;<br>&#125;<br><br>//注意事项<br>//函数的返回值类型不能作为函数重载的条件<br>int main()&#123;<br>func();<br>    func(10);<br>    func(0.1);<br>    func(10,0.1);<br>    func(0.1,10);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="函数重载注意事项"><a href="#函数重载注意事项" class="headerlink" title="函数重载注意事项"></a>函数重载注意事项</h3><ul><li>引用作为函数重载条件</li><li>函数重载碰到函数默认参数<figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br><br>//引用作为函数重载条件<br>void func(int &amp;a)&#123;  //int &amp;a=10;不合法<br>    cout&lt;&lt;&quot;func(int &amp;a)的调用&quot;&lt;&lt;endl;<br>&#125;<br><br>void func(const int &amp;a)&#123;  //const int &amp;a=10;合法<br>    cout&lt;&lt;&quot;func(const int &amp;a)的调用&quot;&lt;&lt;endl;<br>&#125;<br><br>//函数重载碰到默认参数,出现二义性，报错，尽量避免这种情况<br>void func2(int a,int b=10)&#123;<br>    cout&lt;&lt;&quot;func2(int a,int b)的调用&quot;&lt;&lt;endl;<br>&#125;<br><br>void  func2(int a)&#123;<br>    cout&lt;&lt;&quot;func2(int a)的调用&quot;&lt;&lt;endl;<br>&#125;<br><br>int main()&#123;<br>    int a=10;<br>    func(a);<br>    func(10);<br>    func2(10);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><p>C++面向对象的三大特性为：<strong>封装、继承、多态</strong><br>C++认为万事万物都皆为对象，对象上有其属性和行为</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="封装的意义"><a href="#封装的意义" class="headerlink" title="封装的意义"></a>封装的意义</h3><p>封装是C++面向对象三大特性之一<br>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制<br><strong>封装意义一</strong>：<br>在设计类的时候，属性和行为写在一起，表现事物<br><strong>语法</strong>：class 类名{ 访问权限：属性 &#x2F; 行为 };<br>类中的属性和行为，我们统一称为成员<br>属性：成员属性 成员变量<br>行为：成员函数 成员方法<figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br><br>//设计一个圆类，求圆的周长<br>class Circle&#123;<br>    //访问权限<br>public:  //公共权限<br>    //属性<br>    int m_r;<br>    //行为<br>    double calculateZC()&#123;<br>        return 2*PI*m_r;<br>    &#125;<br>&#125;;<br><br>int main()&#123;<br>    //通过圆类，创建具体的圆(对象)<br>    //实例化  （通过一个类，创建一个对象的过程）<br>    Circle c1;<br>    //给圆对象的属性进行赋值<br>    c1.m_r=10;<br>    cout&lt;&lt;&quot;圆的周长为：&quot;&lt;&lt;c1.calculateZC()&lt;&lt;endl;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><strong>封装的意义二</strong>：</li></ul><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制<br>访问权限有三种：</p><ul><li>public 公共权限，成员类内外可以访问</li><li>protected 保护权限，成员类内可以访问，类外不可以访问，在继承中，父类的保护权限的内容，子类也可以访问</li><li>private 私有权限，成员类内可以访问，类外不可以访问，父类的私有权限的内容，子类不可以访问<figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br><br>class Person&#123;<br>  //公共权限<br>public:<br>    string m_Name;<br>  //保护权限<br>protected:<br>    string m_car;<br>  //私有权限<br>private:<br>    int m_password;<br>public:<br>    void func()&#123;<br>        m_Name=&quot;张三&quot;;<br>        m_car=&quot;拖拉机&quot;;<br>        m_password=123456;<br>    &#125;<br>&#125;;<br><br>int main()&#123;<br>    Person p1;<br>    p1.m_Name=&quot;李四&quot;;<br>    p1.m_car=&quot;奔驰&quot;;  //报错，保护权限类外不可访问<br>    p1.m_password=12;  //报错，私有权限类外不可访问<br>    p1.func(); //公共权限可以访问<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="struct和class区别"><a href="#struct和class区别" class="headerlink" title="struct和class区别"></a>struct和class区别</h3><p>在C++中struct和class唯一的区别就在于默认的访问权限不同</p><p>区别：</p><p>struct 默认权限为公共<br>class 默认权限为私有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs [c++]"> #include &lt;iostream&gt;<br>using namespace std;<br><br>class C1&#123;<br>    int m_A;   //默认权限  私有<br>&#125;;<br><br>struct C2&#123;<br>    int m_A;  //默认权限  公有<br>&#125;<br><br>int main()&#123;<br>C1 c1;<br>    c1.m_A=100;  //报错<br>    C2 c2;<br>    c2.m_A=100;  //不会报错,在struct默认的权限为公共的，所以可以访问<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="成员属性设置为私有"><a href="#成员属性设置为私有" class="headerlink" title="成员属性设置为私有"></a>成员属性设置为私有</h3><p>优点1：将所有成员属性设置为私有，可以自己控制读写权限<br>优点2：对于写权限，我们可以监测数据的有效性</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>using namespace std;<br>class Person&#123;<br>public:<br>    void setName(string name)&#123;<br>        m_Name = name;<br>    &#125;<br>    string getName()&#123;<br>        return m_Name;<br>    &#125;<br>    private:<br>        string m_Name;<br>        int m_Age;<br>        string m_lover;<br>    &#125;<br>    <br>    int main()&#123;<br>        Preson p1;<br>        p1.setName(&quot;张三”）;<br>        cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p1.getName() &lt;&lt; endl;<br>        return 0;<br></code></pre></td></tr></table></figure><h2 id="对象的初始化和清理"><a href="#对象的初始化和清理" class="headerlink" title="对象的初始化和清理"></a>对象的初始化和清理</h2><p>C++中的面向对象来源于生活，每个对象也会有初始化设置以及对象销毁前的清理数据的设置</p><h3 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h3><p>对象的初始化和清理也是两个非常重要的安全问题</p><ul><li>一个对象或者变量没有初始状态，对其使用后果是未知的</li><li>同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题<br>C++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象的初始化和清理工作。</li></ul><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供</p><p>编译器提供的构造函数和析构函数是空实现</p><ul><li>构造函数：主要用于创建的对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用</li><li>析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。</li></ul><p><strong>构造函数</strong>：<br>语法：类名(){}<br>构造函数，没有返回值也不写void<br>函数名称与类名相同<br>构造函数可以有参数，因此可以发生重载<br>程序在调用对象时候会自动调用构造，无须手动调用，而且只会调用一次</p><p><strong>析构函数</strong>：<br>语法：<em>类名(){}</em><br>析构函数，没有返回值也不写void<br>函数名称与类名相同，在名称前加上符号<br>析构函数不可以有参数，因此不可以发生重载<br>程序在对象销毁前会自动化调用，无须手动调用，而且只会调用一次</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br>class Preson<br>&#123;<br>public:<br>    Person()&#123;<br>    cout &lt;&lt; &quot;Preson构造函数调用&quot; &lt;&lt; endl;<br>    &#125;<br>    ~Preson()&#123;<br>    cout &lt;&lt; &quot;Preson析构函数调用&quot; &lt;&lt; endl;<br>    &#125;    <br> //构建和析构都是必须有的实现，不然编译器就会提供一个空的构造和析构函数<br> void test01()&#123;<br>    Person p;//在栈上的数据，test01执行完毕后，释放这个对象<br> &#125;<br>int main()&#123;<br>    text01();<br>    Person p; //当对象销毁掉才会使用<br>    return 0;<br>    &#125; <br>    <br></code></pre></td></tr></table></figure><h3 id="析构函数的分类及调用"><a href="#析构函数的分类及调用" class="headerlink" title="析构函数的分类及调用"></a>析构函数的分类及调用</h3><p>两种分类方式：</p><ul><li>按参数分为：有参构造和无参构造</li><li>按类型分为：普通构造和拷贝构造<br>三种调用方式：</li><li>括号法</li><li>显示法</li><li>隐式转换法<br>注意事项：</li><li>调用默认构造函数的时候不用加(),加入了括号，编译器会认为 是一个函数的声明，不会认为在创建对象</li><li>不要利用拷贝构造函数初始化匿名对象，编译器会认为Person(p3)&#x3D;&#x3D;Person p3; 造成重定义报错<figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br>// 分类<br>// 按参数  有参和无参(默认)构造<br>// 按照类  普通和拷贝构造<br>class Person&#123;<br>    Person&#123;<br>        cout &lt;&lt; &quot;默认构造函数&quot; &lt;&lt; endl;<br>        &#125;<br>    Person1(int a)&#123;<br>        age = a;<br>        cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;<br>        &#125;<br>    //拷贝构造函数<br>    Person(const Person &amp;p )&#123;<br>    cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;<br>        //将传入的人身上所有属性，拷贝到我身上<br>        age = p.age;<br>    &#125;<br>    <br>    ~Person()&#123;<br>        cout &lt;&lt; &quot;析构函数 &lt;&lt; endl;<br>        &#125;<br>    int a;<br>&#125;;<br>void test01()&#123;<br>    //括号法<br>    Person p; // 默认构造<br>    Person p2(10); //有参构造函数<br>    Person p3(p2); // 拷贝构造函数<br>  <br>    //显示法<br>    Person p1;<br>    Preson p2 = Person(10); //有参构造<br>    Preson p3 = Person(p2);//拷贝构造<br>    <br>    Person(10); //匿名对象 特点：当前行执行结束后，系统会立即回收掉匿名对象<br>        <br>    //隐式转换法<br>    Person p4 = 10;//相当于 Person p4 = Person(10);<br>    Person p5 = p4;//拷贝构造<br>    <br>&#125;<br>int mian()&#123;<br>    test01();<br>    retun 0;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="拷贝构造函数调用时机"><a href="#拷贝构造函数调用时机" class="headerlink" title="拷贝构造函数调用时机"></a>拷贝构造函数调用时机</h3><p>C++中拷贝构造函数调用时机通常有三种情况：</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值 值传递只是拷贝临时的副本</li><li>以值方式返回局部对象<figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br>class Person<br>&#123;<br>public:<br>    Person()&#123;<br>     cout &lt;&lt; &quot;构造“ &lt;&lt; endl;<br>     &#125;<br>    Person( int age)&#123;<br>        cout &lt;&lt; &quot;有参构造&quot; &lt;&lt;endl;<br>        m_Age = age;<br>     &#125;<br>    Person(const Person &amp; p)<br>     &#123;<br>        m_Age = p.m_Age <br>     &#125;<br>     ~Person&#123;<br>        cout &lt;&lt; &quot;析构&quot; &lt;&lt; endl;<br>     &#125;    <br>     int m_Age; <br>     &#125;<br>void test01()&#123;<br>    Person p1(20);<br>    Person p2(p2);<br>    &#125;<br>void doWork(Person p)&#123;<br><br>&#125;<br>void test02()&#123;<br>    Person p;<br>    doWork(p);<br>    &#125;<br>void doWork2(Person p)&#123;<br>    Person p1;<br>    return p1;//局部对象会拷贝出新对象返回<br>&#125;<br>void test03()&#123;<br>    Person p = doWork2();<br>    &#125;    <br>int mian()&#123;<br>    test01;<br>    test02;<br>    <br>&#125;     <br></code></pre></td></tr></table></figure></li></ul><h3 id="构造函数调用规则"><a href="#构造函数调用规则" class="headerlink" title="构造函数调用规则"></a>构造函数调用规则</h3><p>默认情况下，C++编译器至少给一个类添加3个函数</p><ul><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝<br>构造函数调用规则如下：</li><li>如果用户定义有参构造函数，C++不再提供默认无参构造，但是会提供默认拷贝构造</li><li>如果用户定义拷贝构造函数，C++不会再提供其他构造函数<figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br><br>class Person&#123;<br>public:<br>    Person()&#123;<br>        cout&lt;&lt;&quot;Person默认构造函数调用&quot;&lt;&lt;endl;<br>    &#125;<br>    Person(int age)&#123;<br>        cout&lt;&lt;&quot;Person有参构造函数调用&quot;&lt;&lt;endl;<br>        m_Age=age;<br>    &#125;<br>    Person(const Person &amp;p)&#123;<br>        cout&lt;&lt;&quot;Person拷贝构造函数调用&quot;&lt;&lt;endl;<br>        m_Age=p.m_Age;<br>    &#125;<br>    ~Person()&#123;<br>        cout&lt;&lt;&quot;Person析构函数调用&quot;&lt;&lt;endl;<br>    &#125;<br>    int m_Age;<br>&#125;;<br><br>void test01()&#123;<br>Person p;<br>    p.m_Age=18;<br>    Person p2(p);<br>    cout&lt;&lt;&quot;p2的年龄为：&quot;&lt;&lt;p2.m_Age&lt;&lt;endl;<br>&#125;<br><br>int main()&#123;<br>    <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h3><p>深浅拷贝是面试的经典问题，也是一个常见的坑</p><p><strong>浅拷贝</strong>：简单的赋值拷贝操作</p><p><strong>深拷贝</strong>：在堆区重新申请空间，进行拷贝操作</p><p>浅拷贝带来的问题就是堆区的内存重复释放</p><p>浅拷贝的问题要利用深拷贝进行解决，自己写一个拷贝函数</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs [c++]"> #include &lt;iostream&gt;<br>using namespace std;<br>class Person&#123;<br>public:<br>    Person()&#123;<br>    cout &lt;&lt; &quot;构造&quot; &lt;&lt;endl; <br>    &#125;<br>    <br>    Person(int age,int height)&#123;<br>    m_Age = age;<br>    m_Height = new int(height);<br>    cout &lt;&lt; &quot;有参构造&quot;&lt;&lt; endl;<br>    &#125;<br>    <br>    Person(const Person &amp;p)&#123;<br>     cout &lt;&lt; &quot;拷贝” &lt;&lt; ednl;<br>     m_Age = age;<br>     //深拷贝<br>     //m_Height = new int(height); 编译器默认实现就是这行代码<br>     m_Height = new int (*p.m_Hegiht);<br>     &#125;<br>    ~Person()&#123;<br>    //析构代码，将堆区开辟数据做释放操作<br>        if(!m_Height)<br>        &#123;<br>            detele  m_Height;<br>            m_Height == NULL;<br>        &#125;<br>    cout &lt;&lt; &quot;析构&quot; &lt;&lt; endl;<br>    &#125;<br>    <br>    int m_Age;<br>    int * m_Height;<br>    &#125;;<br>    <br>    void test01()&#123;<br>        Person p1(18,160);<br>        cout &lt;&lt; p1.m_Age &lt;&lt; *p1.m_Height &lt;&lt; endl;<br>        Person p2(p1);<br>        cout &lt;&lt; p2.m_Age &lt;&lt; *p2.m_Height &lt;&lt;endl;<br>    &#125;<br>    <br>    int mian ()&#123;<br>        test01();<br>        return 0;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>总结</strong> ：如果属性在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p></blockquote><h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><p><strong>作用</strong>：<br>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法</strong>：构造函数():属性1(值1),属性2(值2) …{}</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br><br>class Person<br>&#123;<br>public:<br>    //传统初始化操作<br>    Person(int a,int b,int c)&#123;<br>        m_A = a;<br>        m_B = b;<br>        m_C = c;<br>    &#125;<br>    <br>    //初始化列表初始化属性<br>    Person():m_A(10),m_B(20),m_C(30)&#123;<br>    &#125;<br>    Person(int a, int b, int c):m_A(a),m_B(b),m_C(c)&#123;<br>    &#125;<br><br>    int m_A;<br>    int m_B;<br>    int m_C;<br>&#125;;<br><br>void test01()&#123;<br>    person(10, 20, 30);<br>    &#125;<br>    <br>int mian()&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h3><p>C++类中的成员可以是另一个类的对象，我们称该成员为对象成员<br>例如：</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">class A&#123;&#125;;<br>class B&#123;<br>    A a;<br>&#125;;<br></code></pre></td></tr></table></figure><p>B类中有对象作为一个成员，A为对象成员<br>那么创建B对象时，A与B的构造和析构的顺序是谁先谁后？<br>先构造A对象再构造B对象</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>using namespace std;<br><br>class Person<br>&#123;<br>public:<br>    Person(string name, string pName):m_Name(name) , m_Phone(pName)&#123;<br>    &#125;<br>    <br>    string m_Name;<br>    <br>    Phone m_Phone;<br><br>&#125;;<br>class Phone&#123;<br>public:<br>    Phone(string pName)&#123;<br>    m_PName = pName;<br>    &#125;<br>    string m_PName;<br>    string m_Phone<br>&#125;;<br>void test01&#123;<br>    Person p(&quot;张三&quot;，&quot;苹果&quot;);<br>&#125;<br><br>int mian()&#123;<br>    test01();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>总结</strong>：当其他类对象作为本类成员，我们称该成员为对象成员，构造顺序是：先调用对象成员的构造，再调用本类构造，析构顺序与构造相反。</p></blockquote><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>静态成员就是在成员变量和成员函数前加上关键词static，称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化(必须的操作)</li></ul></li><li>静态成员函数<ul><li>所有成员共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><p>静态成员变量：</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">#include &lt;iostream&gt;<br>using namespace std;<br><br>class Person<br>&#123;<br>public:<br>    //所有对象都共享一份数据<br>    //编译阶段就分配内存<br>    //类内声明，类外初始化操作<br>    static int m_A; <br>&#125;;<br>//类外初始化<br><br>int Person::m_A = 100;<br><br>void test01()&#123;<br>    Person p; // p.m_A == 100<br>    <br>    Person p2;<br>    p2.m_A = 200  // p.m_A ==200<br>&#125;<br><br>void test02()&#123;<br>    //静态成员 不属于某个对象上，所有对象都共享一份数据<br>    //因此静态成员变量有两种访问方式<br>    <br>    //通过类名进行访问<br>    Person p;<br>    cout &lt;&lt; p.m_A &lt;&lt; endl;<br>    <br>    //通过类名进行访问<br>    cout &lt;&lt; Person::m_A&lt;&lt; endl;<br>&#125;<br><br>int mian()&#123;<br>    test01;<br>    test02;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意事项</strong>：静态成员变量也是有访问权限的</p></blockquote><p>静态成员函数：<br><strong>注意事项</strong>：静态成员变量也是有访问权限的</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">//静态成员函数<br>class Person&#123;<br>public:<br>    //静态成员函数<br>    static void func()&#123;<br>        m_A=100;//静态成员函数可以访问静态成员变量<br>        m_B=200;//静态成员函数不可以访问非静态成员变量,无法区分是哪个对象的属性<br>        cout&lt;&lt;&quot;static void func函数的调用&quot;&lt;&lt;endl;<br>    &#125;<br>    <br>    static int m_A;<br>    int m_B;//非静态成员变量<br>&#125;;<br><br>int Person::m_A=0;<br><br>void test01()&#123;<br>    //通过对象访问<br>    Person p;<br>    p.func();<br>    //通过类名访问<br>    Person::func();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对象模型和this指针"><a href="#对象模型和this指针" class="headerlink" title="对象模型和this指针"></a>对象模型和this指针</h2><h3 id="成员变量和成员函数分开存储"><a href="#成员变量和成员函数分开存储" class="headerlink" title="成员变量和成员函数分开存储"></a>成员变量和成员函数分开存储</h3><p>在C++中，类内的成员变量和成员函数分开存储<br>只有非静态成员变量才属于类的对象上<br>空对象内存是一个字节</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">class Person&#123;<br><br>  int m_A;  // 非静态成员变量 属于类的对象上<br>  static int m_B; //静态成员变量 不属于类的对象上<br>  void func(); // 非静态成员变量 不属于类的对象上<br>  staic void func() // 非静态成员变量 不属于类的对象上<br>&#125;;  <br>Person::m_B = 0;<br>void test01()&#123;<br>&#123;<br>  Person p;<br>  // 空对象占用内存空间为1字节；<br>  // c++编译器会给每一个空对象也分配一个字节空间，是为了区分空对象占用内春的位置<br>  //每一个空对象都有一个属于自己的地址空间；<br>  cout &lt;&lt; sizeof(p) &lt;&lt; endl;<br>  &#125;<br>void test02()&#123;<br>  Person p;<br>  cout &lt;&lt; sieof(p) &lt;&lt; endl; // 字节为4<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h3><p>通过上一个章节我们知道在C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p><strong>概念：</strong></p><p>C++通过提供特殊的对象指针—-this指针，来进行区分哪个对象调用哪一块代码,<strong>this指针指向被调用的成员函数所属的对象</strong></p><p>this指针是隐含每一个非静态成员函数内的一种指针</p><p>this指针不需要定义，直接使用即可</p><p><strong>this指针的用途：</strong></p><ul><li>解决名称冲突：当形参和成员变量同名时，可用this指针来区分</li><li>返回对象本身：在类的非静态成员函数中返回对象本身，可使用*return this</li></ul><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">class Peron&#123;<br>public:<br>  Person(int age)&#123;<br>  // this指向的是被调用的成员函数所属的对象<br>    this-&gt;age = age;<br>  &#125;<br>  Person&amp; PersonAddAge(Person &amp;p)&#123;<br>    this-&gt;age += p.age;<br>    //this指p2的指针，而*this指向p2这个对象的本体<br>    return *this;<br>  &#125;<br>  PersonAddAge()<br>  int age;<br>&#125;;<br><br>void test01()<br>&#123;<br>  Person p(18);<br>&#125;<br><br>test02()&#123;<br>  Person p1(18);<br>  Person p2(18);<br>  p2.PersonAddAge(p1).PersonAddAge(p1).PersonAddAge(p1);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="空指针访问成员函数"><a href="#空指针访问成员函数" class="headerlink" title="空指针访问成员函数"></a>空指针访问成员函数</h3><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针<br>如果用到this指针，需要加以判断保证代码的健壮性</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">class Person&#123;<br>public:<br>  void showClassName()&#123;<br>  cout &lt;&lt; &quot;1&quot; &lt;&lt; endl;<br> &#125;<br>  void showPersonAge()&#123;<br>  //提高代码的健壮性<br>    if(this == NULL)<br>      return;<br>    cout &lt;&lt; &quot;2&quot; &lt;&lt; m1_Age &lt;&lt; endl;<br>  &#125; <br>  int m_Age;<br>  &#125;;<br>  void test01()&#123;<br>  Person *p = NULL;<br>  //正常打印<br>  p-&gt;showClassName;<br>  //报错<br>  p-&gt;showPersonAge;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h3><p><strong>常函数：</strong></p><ul><li>成员函数后加入const后我们称这个函数为常函数，修饰的是this的指向，让指针指向的值也不可以改变的</li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键词mutable时，在常函数和常对象中依然可以修改<br><strong>常对象：</strong></li><li>声明对象前加const后称该对象为常对象</li><li>常对象只能调用常函数</li></ul><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">class Person<br>&#123;<br>public:<br>  //this的本质是指针常量，指针的指向是不可以修改的<br>  //Person *const this;<br>  <br>  void showPerson() const<br>  &#123;<br>  this-&gt;m_A = 100;//这个是错误的<br>  //this = NULL; //指针的指向是不可以修改的<br>  this-&gt;m_N =100 //这个是正确的<br>  &#125;<br>  <br>  void func()&#123;&#125;<br>  int m_A <br>  mutable int m_B;<br>  &#125;;<br>  <br>void test02()&#123;<br>  const Person p;<br>  p.m_A = 100;//错误的<br>  p.m_B = 100;//正确的<br>  <br>  p.showPerson();//正确<br>  p.func(); // 报错<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><p>在程序里，有些私有属性也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术<br>友元的目的就是让一个函数或者类访问另一个类中私有成员<br>友元的关键词为 <strong>friend</strong><br>友元的三种实现：</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h3 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">Building&#123;<br>  frined void goodGay(Building *building);<br>public:<br>  Building()&#123;<br>     m_SittingRom = &quot;客厅”；<br>     m_BedRoom = “卧室”;<br>  &#125;<br>public:<br>    string m_SittingRom;<br>private:<br>    string m_BedRoom;<br>&#125;;<br><br>//全局函数<br>void goodGay(Building *building)<br>&#123;<br>   cout &lt;&lt; &quot;1&quot; &lt;&lt; builing-&gt;m_SittingRoom &lt;&lt;endl;<br>   cout &lt;&lt; &quot;2&quot; &lt;&lt; builing-&gt;m_BedRoom &lt;&lt;endl;<br>&#125;<br>void test01()&#123;<br>    Building builing;<br>    GoodGay(&amp;builing);<br>    &#125;<br>    <br></code></pre></td></tr></table></figure><h3 id="类做友元"><a href="#类做友元" class="headerlink" title="类做友元"></a>类做友元</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs [c++]"><br>Building&#123;<br>    friend class goodGay() <br>public:<br>    Building()<br>    string m_SittingRom;<br>private:<br>    string m_BedRoom;<br>&#125;;<br><br>//类外写成员函数<br>Building :: Building()&#123;<br>    <br>     m_SittingRom = &quot;客厅”；<br>     m_BedRoom = “卧室”;<br> &#125;<br><br><br>//全局函数<br>class goodGay<br>&#123;<br>  goodGay();<br>  void vist();<br>  Building * building;<br>&#125;<br><br>goodGay::goodGay()&#123;<br>  building = new Buliding;<br>&#125;<br>goodGay::vist();//参观函数，访问Building中的属性&#123;<br>   cout &lt;&lt; &quot;1&quot; &lt;&lt; endl;<br>&#125; <br>void test01()&#123;<br>    Building builing;<br>    GoodGay(&amp;builing);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">Building&#123;<br>    friend void GoodGay::visit();<br>public:<br>    Building()<br>    string m_SittingRom;<br>private:<br>    string m_BedRoom;<br>&#125;;<br><br>//类外写成员函数<br>Building :: Building()&#123;<br>     m_SittingRom = &quot;客厅”；<br>     m_BedRoom = “卧室”;<br> &#125;<br> <br>class GoodGay&#123;<br>public: <br>    GoodGay();<br>    void vist();// 让vist可以访问Building私有成员<br>    void vist2()；// 让vist2不可以访问Building私有成员<br>    Building * builing // 让vist2不可以访问Building私有成员<br>    <br>&#125;;<br><br>GoodGay::GoodGay()&#123;<br>  builiding = new Builiding;<br>&#125;<br><br>void GoodGay::vist();&#123;<br>&#125;<br>void GoodGay::vist2();&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p><strong>运算符重载概念</strong>对已有的运算符重新定义，赋予其另一种功能，以适应不同的数据类型</p><p><strong>注意事项</strong>：运算符重载也可以发生函数重载</p><p>用<strong>operator</strong>运算符作为运算符的重载的运算符标记</p><h3 id="加号运算符重载"><a href="#加号运算符重载" class="headerlink" title="加号运算符重载"></a>加号运算符重载</h3><p><strong>作用</strong>：实现两个自定义数据类型相加的运算</p><p>重载实现方法：</p><ul><li>通过成员函数重载+号</li><li>通过全局函数重载+号<br>用**operator+**作为加号运算符的重载的运算符标记</li></ul><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">class Person&#123;<br>public: <br>    //成员函数重载+号<br>    Person operator+(Person &amp;p)&#123;<br>          Person temp;<br>          temp.m_A = this-&gt;m_A + p.m_A;<br>          temp.m_B = this-&gt;m_B + p.m_B;<br>          return temp;<br>          &#125;;<br>    int m_A;<br>    int m_B;<br>&#125;;<br>Person operator+(Person &amp;p1, Person &amp;p2)&#123;<br>      Person temp;<br>      temp.m_A =  p1.m_A + p2.m_A;<br>      temp.m_A =  p1.m_A + p2.m_B;<br>      return temp;<br>      &#125;<br>Person operator+(Person &amp;p1, int num)&#123;<br>      Person temp;<br>      temp.m_A = p1.m_A + num;<br>      temp.m_B = p1.m_B + num;<br>      return temp;<br> &#125;<br> void test01()&#123;<br>    Person p1;<br>    p1.m_A=10;<br>    p1.m_B=10;<br>    Person p2;<br>    p2.m_A=10;<br>    p2.m_B=10;<br>    //本质调用<br>    Person p3=p1.operator+(p2);<br>    //简化调用<br>    Person p3=p1+p2;<br>    //运算符重载也可以发生函数重载<br>    Person p4=p1+10;<br>    cout&lt;&lt;&quot;p3.m_A= &quot;&lt;&lt;p3.m_A&lt;&lt;endl;<br>    cout&lt;&lt;&quot;p3.m_B= &quot;&lt;&lt;p3.m_B&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>总结</strong>：</p><ul><li>对于内置的数据类型的表达式的运算符是不可能改变的</li><li>不要滥用运算符重载</li></ul></blockquote><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>继承是面向对象的三大特性之一</strong></p><p>我们发现，定义一些类时，下级别的成员除了拥有上一级的共性，还有自己的特性</p><p>这个时候我们就考虑利用继承的技术，减少重复代码</p><h3 id="继承的基本语法"><a href="#继承的基本语法" class="headerlink" title="继承的基本语法"></a>继承的基本语法</h3><p><strong>语法</strong>：class 子类:继承方式 父类类名</p><p>子类 也成为派生类</p><p>父类 也称为基类</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs [c++]">公共类<br>class BasePage&#123;<br>public:<br>  void header()&#123;<br>    cout &lt;&lt; &quot;header&quot;  &lt;&lt; endl;<br>   &#125;<br>   void footer()&#123;<br>    cout &lt;&lt; &quot;footer&quot; &lt;&lt; endl;<br>    &#125;<br>class Java::public BasePage&#123;   <br>public:<br>  void content()&#123;<br>    cout &lt;&lt; &quot;content&quot; &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br>class Python::public  BasePage&#123;<br>public:<br>  void content()&#123;<br>    cout &lt;&lt; &quot;content&quot; &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br>class Cpp:public BasePage&#123;<br>public:<br>    void content()&#123;<br>        cout&lt;&lt;&quot;C++学科视频&quot;&lt;&lt;endl;<br>    &#125;<br>&#125;;<br><br>void test01()&#123;<br>    cout&lt;&lt;&quot;Java下载视频页面如下：&quot;&lt;&lt;endl;<br>    Java ja;<br>    ja.header();<br>    ja.footer();<br>    ja.content();<br>    cout&lt;&lt;&quot;python下载视频页面如下：&quot;&lt;&lt;endl;<br>    Python py;<br>    py.header();<br>    py.footer();<br>    py.content();<br>    cout&lt;&lt;&quot;C++下载视频页面如下：&quot;&lt;&lt;endl;<br>    Cpp cpp;<br>    cpp.header();<br>    cpp.footer();<br>    cpp.content();<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p><strong>总结</strong>：</p><p>继承的好处：可以减少重复的代码</p><p>派生类中的成员，包含两大部分：</p><ul><li>一类是从基类继承过来的，从基类继承过来的表现其共性</li><li>一类是自己增加的成员，新增的成员体现其个性</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码随想录一刷</title>
    <link href="/2024/09/16/DaiMaSuiXiang-1/"/>
    <url>/2024/09/16/DaiMaSuiXiang-1/</url>
    
    <content type="html"><![CDATA[<h2 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h2><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704.二分查找"></a>704.二分查找</h3><p><img src="/../img/DaiMaSuiXiang_1/704.png"><br>第一种（左闭右闭）</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int search(int* nums, int numsSize, int target) &#123;<br>    int left = 0;<br>    int right = numsSize - 1;<br>    int middle;<br>    while(left &lt;= right)&#123;<br>         middle = (left + right) / 2;<br>        if(target &lt; nums[middle])<br>            right = middle - 1;<br>        else if(target &gt;nums[middle] )<br>            left =  middle + 1;<br>        else<br>            return middle;<br>    &#125;<br>    return -1;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种（左闭右开）</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int search(int* nums, int numsSize, int target) &#123;<br>    int left = 0;<br>    int right = numsSize;<br>    int middle;<br>    while(left &lt; right)&#123;<br>         middle = (left + right) / 2;<br>        if(target &lt; nums[middle])<br>            right = middle;<br>        else if(target &gt;nums[middle] )<br>            left =  middle + 1;<br>        else<br>            return middle;<br>    &#125;<br>    return -1;<br></code></pre></td></tr></table></figure><p><strong>总结</strong><br>二分法就是化一为二，将问题细分，当是一个有序的数组才可以使用，区间的选择决定了while的条件和right的值</p><h3 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a>34. 在排序数组中查找元素的第一个和最后一个位置</h3><p><img src="/../img/DaiMaSuiXiang_1/34.png"><br>思路：通过两个二分法分别找出左右两个边界。<br>错误和分析：我将数组从中间分成两半，然后这个中间值作为左右两个边界了，应该是先用二分法找出第一个出现的目标值，然后再根据找哪个边界值然后才进行下一个二分法。虽然我的想法是这个的，但是我的代码还是先是将中间值作为了边界值<br>新知识：&gt;&gt;1右移运算符，将二进制位数向右移动一位，相当于整数除法除以2<br>middle &#x3D; left+((right - letf) &gt;&gt; 1)  等于 middle&#x3D;（left+right)&#x2F;2</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int searchLeftBorder(int *nums, int numsSize, int target) &#123;<br>    int left = 0, right = numsSize - 1;<br>    // 记录leftBorder没有被赋值的情况<br>    int leftBorder = -1;<br>    // 边界为[left, right]<br>    while (left &lt;= right) &#123;<br>        // 更新middle值，等同于middle = (left + right) / 2<br>        int middle = left + ((right - left) &gt;&gt; 1);<br>        // 若当前middle所指为target，将左边界设为middle，并向左继续寻找左边界<br>        if (nums[middle] == target) &#123;<br>            leftBorder = middle;<br>            right = middle - 1;<br>        &#125; else if (nums[middle] &gt; target) &#123;<br>            right = middle - 1;<br>        &#125; else &#123;<br>            left = middle + 1;<br>        &#125;<br>    &#125;<br>    return leftBorder;<br>&#125;<br>int searchRightBorder(int *nums, int numsSize, int target) &#123;<br>    int left = 0, right = numsSize - 1;<br>    // 记录rightBorder没有被赋值的情况<br>    int rightBorder = -1;<br>    while (left &lt;= right) &#123;<br>        int middle = left + ((right - left) &gt;&gt; 1);<br>        // 若当前middle所指为target，将右边界设为middle，并向右继续寻找右边界<br>        if (nums[middle] == target) &#123;<br>            rightBorder = middle;<br>            left = middle + 1;<br>        &#125; else if (nums[middle] &gt; target) &#123;<br>            right = middle - 1;<br>        &#125; else &#123;<br>            left = middle + 1;<br>        &#125;<br>    &#125;<br>    return rightBorder;<br>&#125;<br> <br>int* searchRange(int* nums, int numsSize, int target, int* returnSize)&#123;<br>    int leftBorder = searchLeftBorder(nums, numsSize, target);<br>    int rightBorder = searchRightBorder(nums, numsSize, target);<br> <br>    // 定义返回数组及数组大小<br>    *returnSize = 2;<br>    int *resNums = (int*)malloc(sizeof(int) * 2);<br>    resNums[0] = leftBorder;<br>    resNums[1] = rightBorder;<br>    return resNums;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="35搜索插入位置"><a href="#35搜索插入位置" class="headerlink" title="35搜索插入位置"></a>35搜索插入位置</h3><p><img src="/../img/DaiMaSuiXiang_1/35.png"><br>左闭右闭</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int searchInsert(int* nums, int numsSize, int target) &#123;<br>    int left = 0;<br>    int right = numsSize - 1;<br>    int  middle;<br>    while(left &lt;= right)&#123;<br>        middle = (left + right)/2;<br>        if(nums[middle] &lt; target )<br>            left = middle + 1;<br>        else if(nums[middle] &gt; target)<br>            right = middle - 1;<br>        else <br>            return middle;<br>    &#125;<br>    return right + 1;<br>    &#125;<br></code></pre></td></tr></table></figure><p>左闭右开</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int searchInsert(int* nums, int numsSize, int target) &#123;<br>    int left = 0;<br>    int right = numsSize;<br>    int  middle;<br>    while(left &lt; right)&#123;<br>        middle = (left + right)/2;<br>        if(nums[middle] &lt; target )<br>            left = middle + 1;<br>        else if(nums[middle] &gt; target)<br>            right = middle;<br>        else <br>            return middle;<br>    &#125;<br>    return right;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h3><p><img src="/../img/DaiMaSuiXiang_1/27.png"><br>暴力解法</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int removeElement(int* nums, int numsSize, int val) &#123;<br>    for(int i = 0;i &lt; numsSize; i++)&#123;<br>        if(nums[i] == val)<br>        &#123;<br>            for(int j = i + 1; j &lt; numsSize; j++ )<br>                nums[j - 1] = nums[j];<br>            i--;<br>            numsSize--; <br>        &#125;<br>    &#125;<br>    return numsSize;<br>&#125;<br></code></pre></td></tr></table></figure><p>双指针</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int removeElement(int* nums, int numsSize, int val) &#123;<br>    int slow = 0; <br>    for(int fast = 0; fast &lt; numsSize; fast++)&#123;<br>        if(nums[fast] != val)<br>            nums[slow++] = nums[fast];<br>    &#125;<br>    return slow;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结<br>数组理论知识：数组在内存上是连续的，不可以通过删除移除元素，只可以通过覆盖元素<br>双指针：慢指针是指向数组位置，快指针是指向数值，将原来的数组当作空白的数组，只要不是删除值，那么就将它复制数组中</p><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><h3 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h3><p><img src="/../img/DaiMaSuiXiang_1/997.png"><br>暴力解法（插入排序）</p><figure class="highlight plaintext"><figcaption><span>[c]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bush">void square(int* nums, int numsSize)&#123;<br>    for(int i = 0; i &lt; numsSize; i++)<br>        nums[i]*=nums[i];<br>&#125;<br>void insertSort(int* nums, int numsSize)&#123;<br>    int i;<br>    int p;<br>    int temp;<br>    for(i = 1; i &lt; numsSize; i++)&#123;<br>        temp = nums[i];<br>        for(p = i;p &gt; 0 &amp;&amp; nums[p-1] &gt; temp; p--)<br>            nums[p] = nums[p-1];<br>        nums[p] = temp;<br>    <br>    &#125;<br>&#125;<br>int* sortedSquares(int* nums, int numsSize, int* returnSize) &#123;<br>    square(nums, numsSize);<br>    insertSort(nums, numsSize);<br>    *returnSize = numsSize;<br>    int* ans=(int*)malloc(sizeof(int)*numsSize);<br>    for(int i = 0; i &lt; numsSize; i++)<br>        ans[i] = nums[i];<br>    return ans;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>双指针</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs [c]">/**<br> * Note: The returned array must be malloced, assume caller calls free().<br> */<br>int* sortedSquares(int* nums, int numsSize, int* returnSize) &#123;<br>    *returnSize = numsSize;<br>    int left = 0;<br>    int right = numsSize - 1;<br>    int*ans = (int*)malloc(sizeof(int)*numsSize);<br>    int index;<br>    for( index = numsSize-1; index &gt;= 0; index--)&#123;<br>        int lsquare = nums[left]*nums[left];<br>        int rsquare =  nums[right]*nums[right];<br>        if(lsquare &gt; rsquare)<br>        &#123;<br>            ans[index] = lsquare;<br>            left++;<br>        &#125;<br>        else<br>        &#123;<br>            ans[index] = rsquare;<br>            right--;<br>        &#125;<br>        <br>    &#125;<br>    return ans;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：如何使用双指针是看题目的需求，这道题用双指针的思路和归并排序的思路相类似。</p><h3 id="209-长度最小数组"><a href="#209-长度最小数组" class="headerlink" title="209.长度最小数组"></a>209.长度最小数组</h3><p><img src="/../img/DaiMaSuiXiang_1/209.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int minSubArrayLen(int target, int* nums, int numsSize) &#123;<br>    int minlength =  INT_MAX;<br>    int sum = 0;<br>    int left = 0;<br>    int right = 0;<br>    for(; right &lt; numsSize; right++)&#123;<br>        sum+=nums[right];<br>        while(sum &gt;= target)<br>        &#123;<br>            int SubLength = right - left + 1;<br>            minlength=minlength &lt; SubLength ? minlength: SubLength;<br>            sum-= nums[left++];<br>        &#125;<br>    &#125;<br>    return minlength == INT_MAX ? 0 : minlength;<br>&#125;<br></code></pre></td></tr></table></figure><p>我的错误：想将所有的长度放在一个数组里，然后再进行比较，而且没有完全将所有的可能考虑到。对c语言还不是很熟练<br>总结：滑动窗口中，要考虑滑动窗口是如何移动的。看到最大值，可以使用动态变化，可以使用三元表示法，最值初始化时，可以使用头文件带的最值。</p><h3 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59.螺旋矩阵II"></a>59.螺旋矩阵II</h3><p><img src="/../img/DaiMaSuiXiang_1/59.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int** generateMatrix(int n, int* returnSize, int** returnColumnSizes)&#123;<br>    //初始化返回的结果数组的大小<br>    *returnSize = n;<br>    *returnColumnSizes = (int*)malloc(sizeof(int) * n);<br>    //初始化返回结果数组ans<br>    int** ans = (int**)malloc(sizeof(int*) * n);<br>    int i;<br>    for(i = 0; i &lt; n; i++) &#123;<br>        ans[i] = (int*)malloc(sizeof(int) * n);<br>        (*returnColumnSizes)[i] = n;<br>    &#125;<br> <br>    //设置每次循环的起始位置<br>    int startX = 0;<br>    int startY = 0;<br>    //设置二维数组的中间值，若n为奇数。需要最后在中间填入数字<br>    int mid = n / 2;<br>    //循环圈数<br>    int loop = n / 2;<br>    //偏移数<br>    int offset = 1;<br>    //当前要添加的元素<br>    int count = 1;<br> <br>    while(loop) &#123;<br>        int i = startX;<br>        int j = startY;<br>        //模拟上侧从左到右<br>        for(; j &lt;   n - offset; j++) &#123;<br>            ans[startX][j] = count++;<br>        &#125;<br>        //模拟右侧从上到下<br>        for(; i &lt;  n - offset; i++) &#123;<br>            ans[i][j] = count++;<br>        &#125;<br>        //模拟下侧从右到左<br>        for(; j &gt; startY; j--) &#123;<br>            ans[i][j] = count++;<br>        &#125;<br>        //模拟左侧从下到上<br>        for(; i &gt; startX; i--) &#123;<br>            ans[i][j] = count++;<br>        &#125;<br>        //偏移值每次加2<br>        offset+=1;<br>        //遍历起始位置每次+1<br>        startX++;<br>        startY++;<br>        loop--;<br>    &#125;<br>    //若n为奇数需要单独给矩阵中间赋值<br>    if(n%2)<br>        ans[mid][mid] = count;<br> <br>    return ans;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：螺旋矩阵最重要的就是区间的选择。</p><h2 id="数组总结"><a href="#数组总结" class="headerlink" title="数组总结"></a>数组总结</h2><p>理论<br>数组的内存是连续的，想要得到连续的数组，就不可以直接删除其中的元素<br>二维数组的初始化</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int** ans = (int**)malloc(sizeof(int*) * n);<br>    int i;<br>    for(i = 0; i &lt; n; i++) &#123;<br>    ans[i] = (int*)malloc(sizeof(int) * n);<br></code></pre></td></tr></table></figure><p>解题方法：<br>二分法：根据是否满足题目的条件来缩小答案所在的区间，这个就是二分的本质。<br>做好区间的选择<br>双指针：要根据题目的条件来确定快慢指针的位置，循环的条件</p><h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><h3 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h3><p><img src="/../img/DaiMaSuiXiang_1/203.png"><br>有哑结点</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs [c]">struct ListNode* removeElements(struct ListNode* head, int val) &#123;<br>    typedef struct ListNode ListNode;<br>    ListNode *shead;<br>    shead = (ListNode*)malloc(sizeof(ListNode));<br>    shead-&gt;next = head;<br>    ListNode *cur = shead;<br>    while(cur-&gt;next != NULL)<br>&#123;<br>        if(cur-&gt;next-&gt;val == val)<br>            &#123;<br>                ListNode *temp = cur-&gt;next;<br>                cur-&gt;next = cur-&gt;next-&gt;next;<br>                free(temp);<br>&#125;<br>           else<br>&#123;<br>                cur = cur-&gt;next;<br>&#125;<br><br>    &#125;<br>    head = shead-&gt;next;<br>    return head;<br>&#125;<br></code></pre></td></tr></table></figure><p>无哑结点</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs [c]">struct ListNode* removeElements(struct ListNode* head, int val) &#123;<br>    struct ListNode* temp;<br>    while(head &amp;&amp; head-&gt;val == val)<br>&#123;<br>        temp = head;<br>        head = head-&gt;next;<br>        free(temp);<br>&#125;<br>       struct ListNode* cur = head;<br>    while(cur &amp;&amp; (temp = cur-&gt;next))<br>&#123;<br>    if(temp -&gt;val == val)<br>&#123;<br>        cur-&gt;next = temp-&gt;next;<br>        free(temp);<br>&#125;<br>    else<br>    cur = cur-&gt;next;<br><br>    &#125;<br>    return head;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>总结：有无哑结点的，就是对头节点如何操作的问题。</p><h3 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707.设计链表"></a>707.设计链表</h3><p><img src="/../img/DaiMaSuiXiang_1/707.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs [c]">typedef struct &#123;<br>    int val;<br>    struct MyLinkedList* next;<br>&#125; MyLinkedList;<br><br>MyLinkedList* myLinkedListCreate() &#123;<br>    MyLinkedList* head = (MyLinkedList *)malloc(sizeof (MyLinkedList));<br>    head-&gt;next = NULL;<br>    return head;<br>&#125;<br><br>int myLinkedListGet(MyLinkedList* obj, int index) &#123;<br>    MyLinkedList *cur = obj-&gt;next;<br>    for (int i = 0; cur != NULL; i++)&#123;<br>        if (i == index)&#123;<br>            return cur-&gt;val;<br>&#125;<br>            else&#123;<br>                cur = cur-&gt;next;<br>&#125;<br>&#125;<br>        return -1;<br>&#125;<br><br>void myLinkedListAddAtHead(MyLinkedList* obj, int val) &#123;<br>    MyLinkedList* nhead = (MyLinkedList*)malloc(sizeof(MyLinkedList));<br>        nhead-&gt;val = val;<br>    nhead-&gt;next = obj-&gt;next;<br>    obj-&gt;next = nhead;<br>&#125;<br>void myLinkedListAddAtTail(MyLinkedList* obj, int val) &#123;<br>    MyLinkedList *cur = obj;<br>    while(cur-&gt;next != NULL)&#123;<br>    cur = cur-&gt;next;<br>&#125;<br>MyLinkedList *ntail = (MyLinkedList *)malloc(sizeof (MyLinkedList));<br>    ntail-&gt;val = val;<br>    ntail-&gt;next = NULL;<br>    cur-&gt;next = ntail;<br>&#125;<br><br>void myLinkedListAddAtIndex(MyLinkedList* obj, int index, int val) &#123;<br>if (index == 0)&#123;<br>myLinkedListAddAtHead(obj, val);<br>return;<br>&#125;<br>MyLinkedList *cur = obj-&gt;next;<br>for(int count = 1; cur != NULL;count++)&#123;<br>    if(count == index)<br>&#123;<br>        MyLinkedList* new =(MyLinkedList*)malloc(sizeof(MyLinkedList));<br>        new-&gt;val = val;<br>        new-&gt;next = cur-&gt;next;<br>        cur-&gt;next = new;<br>        return;<br>&#125;<br>        else<br>            cur = cur-&gt;next;<br>    &#125;<br>&#125;<br><br>void myLinkedListDeleteAtIndex(MyLinkedList* obj, int index) &#123;<br>    if (index == 0)&#123;<br>        MyLinkedList *tmp = obj-&gt;next;<br>    <br>    if (tmp != NULL)&#123;<br>        obj-&gt;next = tmp-&gt;next;<br>        free(tmp);<br>    &#125;<br>    return;<br>&#125;<br>MyLinkedList *cur = obj-&gt;next;<br>    for (int i = 1 ;cur != NULL &amp;&amp; cur-&gt;next != NULL; i++)&#123;<br>        if (i == index)&#123;<br>            MyLinkedList *tmp = cur-&gt;next;<br>        if (tmp != NULL) &#123;<br>            cur-&gt;next = tmp-&gt;next;<br>        free(tmp);<br>&#125;<br>        return;<br>&#125;<br>e       lse&#123;<br>        cur = cur-&gt;next;<br>&#125;<br>&#125;<br><br>&#125;<br><br>void myLinkedListFree(MyLinkedList* obj) &#123;<br><br>    while(obj != NULL)<br>    &#123;<br>        MyLinkedList *tmp = obj;<br>        obj = obj-&gt;next;<br>        free(tmp);<br> <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="206反转链表"><a href="#206反转链表" class="headerlink" title="206反转链表"></a>206反转链表</h3><p><img src="/../img/DaiMaSuiXiang_1/206.png"><br>双指针</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">struct ListNode* reverseList(struct ListNode* head) &#123;<br>    struct ListNode* cur = head;<br>    struct ListNode* pre = NULL;<br>    while(cur)&#123;<br>    struct ListNode* temp;<br>    temp = cur-&gt;next;<br>    cur-&gt;next = pre;<br>    pre = cur;<br>    cur = temp;<br>&#125;<br>    return pre;<br>&#125;<br></code></pre></td></tr></table></figure><p>递归</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">struct ListNode*reverse(struct ListNode* cur,struct ListNode* pre )&#123;<br><br>    if(!cur)<br>        return pre;<br>    struct ListNode* temp = cur-&gt;next;<br>    cur-&gt;next = pre;<br>    return reverse(temp,cur);<br><br>&#125;<br>    struct ListNode* reverseList(struct ListNode* head) &#123;<br>    return reverse(head,NULL);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="day04"><a href="#day04" class="headerlink" title="day04"></a>day04</h2><h3 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h3><p><img src="/../img/DaiMaSuiXiang_1/24.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs [c]">struct ListNode* swapPairs(struct ListNode* head) &#123;<br>    typedef struct ListNode ListNode;<br>    ListNode *fakehead = (ListNode*)malloc(sizeof(ListNode));<br>    fakehead-&gt;next = head;<br>    ListNode* left = fakehead;<br>    ListNode* right = fakehead-&gt;next;<br>    while(left &amp;&amp; right &amp;&amp; right-&gt;next)<br>    &#123;<br>        left-&gt;next = right-&gt;next;<br>        right-&gt;next = left-&gt;next-&gt;next;<br>        left-&gt;next-&gt;next = right; <br>        left = right;<br>        right = left-&gt;next; <br>    &#125;<br>    return fakehead-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h3><p><img src="/../img/DaiMaSuiXiang_1/19.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs [c]">/**<br> * Definition for singly-linked list.<br> * struct ListNode &#123;<br> *     int val;<br> *     struct ListNode *next;<br> * &#125;;<br> */<br>struct ListNode* removeNthFromEnd(struct ListNode* head, int n) &#123;<br>    typedef  struct ListNode ListNode;<br>    ListNode* fakehead=(ListNode*)malloc(sizeof(ListNode));<br>    fakehead-&gt;next = head;<br>    ListNode* fast = fakehead;<br>    ListNode* slow = fakehead;<br>    int count = 0;<br>    for(;count &lt; n+1; count++)&#123;<br>        fast = fast-&gt;next;<br>    &#125;<br>    while(fast)&#123;<br>        fast = fast-&gt;next;<br>        slow = slow-&gt;next;<br>    &#125;<br>    ListNode* temp;<br>    temp = slow-&gt;next;<br>    slow -&gt;next = slow-&gt;next-&gt;next;<br>    free(temp);<br>    return fakehead-&gt;next;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h3><p><img src="/../img/DaiMaSuiXiang_1/02.07.png"></p><p>思考：</p><p>为什么要对齐链表长度后才进行比较,相差的那一段为什么不会有相同的</p><p>——因为他们有一段共同的长度，所以说，他们相差的那一段中不可能有相同的元素。</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs [c]">ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) &#123;<br>    ListNode *l = NULL, *s = NULL;<br>    int lenA = 0, lenB = 0, gap = 0;<br>    // 求出两个链表的长度<br>    s = headA;<br>    while (s) &#123;<br>        lenA ++;<br>        s = s-&gt;next;<br>    &#125;<br>    s = headB;<br>    while (s) &#123;<br>        lenB ++;<br>        s = s-&gt;next;<br>    &#125;<br><br>    // 求出两个链表长度差<br>    if (lenA &gt; lenB) &#123;<br>        l = headA, s = headB;<br>        gap = lenA - lenB;<br>    &#125; else &#123;<br>        l = headB, s = headA;<br>        gap = lenB - lenA;<br>    &#125;<br><br>    // 尾部对齐<br>    while (gap--) l = l-&gt;next;<br>    // 移动，并检查是否有相同的元素<br>    while (l) &#123;<br>        if (l == s) return l;<br>        l = l-&gt;next, s = s-&gt;next;<br>    &#125;<br><br>    return NULL;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h3><p><img src="/../img/DaiMaSuiXiang_1/142.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs [c]">ListNode *detectCycle(ListNode *head) &#123;<br>    ListNode *fast = head, *slow = head;<br>    while (fast &amp;&amp; fast-&gt;next) &#123;<br>        // 这里判断两个指针是否相等，所以移位操作放在前面<br>        slow = slow-&gt;next;<br>        fast = fast-&gt;next-&gt;next;<br>        if (slow == fast) &#123; // 相交，开始找环形入口：分别从头部和从交点出发，找到相遇的点就是环形入口<br>            ListNode *f = fast, *h = head;<br>            while (f != h) f = f-&gt;next, h = h-&gt;next;<br>            return h;<br>        &#125;<br>    &#125;<br>    return NULL;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="day6"><a href="#day6" class="headerlink" title="day6"></a>day6</h2><h3 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h3><p><img src="/../img/DaiMaSuiXiang_1/242.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs [c]">bool isAnagram(char* s, char* t) &#123;<br>    int record[26] = &#123;0&#125;;<br>    for(int i = 0; i &lt; strlen(s);i++)<br>    &#123;<br>        record[s[i] - &#x27;a&#x27;]++;<br>    &#125;<br>    for(int i = 0; i &lt; strlen(t); i++)&#123;<br>        record[t[i] - &#x27;a&#x27;]--;<br>    &#125;<br>    for(int i = 0; i &lt; 26; i++)&#123;<br>        if(record[i] != 0)<br>            return false;<br>    &#125;<br>    return true;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h3><p><img src="/../img/DaiMaSuiXiang_1/349.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs [c]">/**<br> * Note: The returned array must be malloced, assume caller calls free().<br> */<br>int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size,<br>                  int* returnSize) &#123;<br>    int nums1Cnt[1000] = &#123;0&#125;;<br>    int lessSize = nums1Size &lt; nums2Size ? nums1Size : nums2Size;<br>    int* result = (int*)calloc(lessSize, sizeof(int));<br>    int resultIndex = 0;<br> <br>    int i;<br> <br>    /* Calculate the number&#x27;s counts for nums1 array */<br>    for (i = 0; i &lt; nums1Size; i++) &#123;<br>        nums1Cnt[nums1[i]]++;<br>    &#125;<br>    /* Check if the value in nums2 is existing in nums1 count array */<br>    for (i = 0; i &lt; nums2Size; i++) &#123;<br>        if (nums1Cnt[nums2[i]] != 0) &#123;<br>            result[resultIndex] = nums2[i];<br>            resultIndex++;<br>            nums1Cnt[nums2[i]] = 0;<br>        &#125;<br>    &#125;<br>    *returnSize = resultIndex;<br>    return result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h3><p><img src="/../img/DaiMaSuiXiang_1/202.png"><br>思路1：要将每一次的结果给记录下来，当有结果再次重复的时候，说明是循环的了，所以用到哈希表</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int getsum(int n)&#123;<br>    int sum = 0;<br>    while(n)&#123;<br>        sum+= (n%10)*(n%10);<br>        n /= 10;<br>    &#125;<br>    return sum;<br>&#125;<br>bool isHappy(int n) &#123;<br>    int sum = getsum(n);<br>    int hash[820] = &#123;0&#125;;<br>    while(sum != 1)&#123;<br>        if(hash[sum] == 1)<br>            return false;<br>        else&#123;<br>            hash[sum]++;<br>        &#125;<br>        sum = getsum(sum);<br>    &#125;<br>    return true;<br>&#125;<br></code></pre></td></tr></table></figure><p>思路二：用双指针，为什么可以用双指针，因为可以将每一次的sum放入链表中，如果是是循环的话，那么就会形成环链，在链表中，学习到了如何找一个环链的入口，所以说这道题可以通过双指针的方法来解决</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int getsum(int n)&#123;<br>    int sum = 0;<br>    while(n)&#123;<br>        sum+= (n%10)*(n%10);<br>        n /= 10;<br>    &#125;<br>    return sum;<br>&#125;<br>bool isHappy(int n) &#123;<br>   int slow = n;<br>    int fast = n;<br> <br>    do &#123;<br>        slow = getsum(slow);<br>        fast = getsum(getsum(fast));<br>    &#125; while (slow != fast);<br> <br>    return (fast == 1);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><p><img src="/../img/DaiMaSuiXiang_1/1.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs [c]">    typedef struct &#123;<br>     int key;<br>     int value;<br>     UT_hash_handle hh; // make this structure hashable<br> &#125; map;<br> <br>map* hashMap = NULL;<br> void hashMapAdd(int key, int value)&#123;<br>     map* s;<br>     // key already in the hash?<br>     HASH_FIND_INT(hashMap, &amp;key, s);<br>     if(s == NULL)&#123;<br>         s = (map*)malloc(sizeof(map));<br>         s -&gt; key = key;<br>         HASH_ADD_INT(hashMap, key, s);<br>     &#125;<br>     s -&gt; value = value;<br> &#125;<br> <br>map* hashMapFind(int key)&#123;<br>     map* s;<br>     // *s: output pointer<br>     HASH_FIND_INT(hashMap, &amp;key, s);   <br>     return s;<br> &#125;<br> <br> void hashMapCleanup()&#123;<br>     map* cur, *tmp;<br>     HASH_ITER(hh, hashMap, cur, tmp)&#123;<br>         HASH_DEL(hashMap, cur);<br>         free(cur);<br>     &#125;<br> &#125;<br> <br> void hashPrint()&#123;<br>     map* s;<br>     for(s = hashMap; s != NULL; s=(map*)(s -&gt; hh.next))&#123;<br>         printf(&quot;key %d, value %d\n&quot;, s -&gt; key, s -&gt; value);<br>     &#125;<br> &#125;<br> <br> <br>int* twoSum(int* nums, int numsSize, int target, int* returnSize)&#123;<br>    int i, *ans;<br>    // hash find result<br>    map* hashMapRes; <br>    hashMap = NULL;<br>    ans = malloc(sizeof(int) * 2);<br> <br>    for(i = 0; i &lt; numsSize; i++)&#123;<br>        // key 代表 nums[i] 的值，value 代表所在 index;<br>        hashMapAdd(nums[i], i);<br>    &#125;<br> <br>    hashPrint();<br> <br>    for(i = 0; i &lt; numsSize; i++)&#123;<br>        hashMapRes = hashMapFind(target - nums[i]);<br>        if(hashMapRes &amp;&amp; hashMapRes -&gt; value != i)&#123;<br>            ans[0] = i;<br>            ans[1] = hashMapRes -&gt; value ;<br>            *returnSize = 2;<br>            return ans;<br>        &#125;<br>    &#125;<br>    <br>    hashMapCleanup();<br>    return NULL;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="day07"><a href="#day07" class="headerlink" title="day07"></a>day07</h2><h3 id="454-四数相加II"><a href="#454-四数相加II" class="headerlink" title="454.四数相加II"></a>454.四数相加II</h3><p><img src="/../img/DaiMaSuiXiang_1/454.png"><br>思路：从四个数组中找到四个元素相加等于零，暴力解法就是用四个for循环进行遍历，</p><p>如何用到哈希法呢？</p><p>——可以效仿两数相加这道题，有四个数组，那么就将他们分成两个数组，先遍历数组1，将其变成哈希表</p><p>哈希表的结构是？</p><p>——因为数组内的元素范围很大，所以不可以将将元素映射到数组里面，数组的大小难以确定，并且会浪费大量的内存，然后不仅要储存元素，还要储存出现的次数，所以选择使用map，而不使用set，</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs [c]">struct hashTable &#123;<br>    int key;<br>    int val;<br>    UT_hash_handle hh;<br>&#125;;<br> <br>int fourSumCount(int* A, int ASize, int* B, int BSize, int* C, int CSize, int* D, int DSize) &#123;<br>    struct hashTable* hashtable = NULL;<br>    for (int i = 0; i &lt; ASize; ++i) &#123;<br>        for (int j = 0; j &lt; BSize; ++j) &#123;<br>            int ikey = A[i] + B[j];<br>            struct hashTable* tmp;<br>            HASH_FIND_INT(hashtable, &amp;ikey, tmp);<br>            if (tmp == NULL) &#123;<br>                struct hashTable* tmp = malloc(sizeof(struct hashTable));<br>                tmp-&gt;key = ikey, tmp-&gt;val = 1;<br>                HASH_ADD_INT(hashtable, key, tmp);<br>            &#125; else &#123;<br>                tmp-&gt;val++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    int ans = 0;<br>    for (int i = 0; i &lt; CSize; ++i) &#123;<br>        for (int j = 0; j &lt; DSize; ++j) &#123;<br>            int ikey = -C[i] - D[j];<br>            struct hashTable* tmp;<br>            HASH_FIND_INT(hashtable, &amp;ikey, tmp);<br>            if (tmp != NULL) &#123;<br>                ans += tmp-&gt;val;<br>            &#125;<br>        &#125;<br>    &#125;<br>    return ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a>383. 赎金信</h3><p><img src="/../img/DaiMaSuiXiang_1/383.png"><br>思路：和有效字母异位的解题大体一样，但是，这道题是将两个数组都变成哈希表，然后才进行比较他们的值，如果ransomNote大于magazine，那么就返回false,</p><p>为什么不能和有效字母异位一样，只一个哈希表，然后对哈希表进行减值操作呢？</p><p>——数组2的值可能会超过数组一的值，那么就会出现一种情况，数值一的值会变成负数，那么就会返回false了</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs [c]">bool canConstruct(char* ransomNote, char* magazine) &#123;<br>    int record1[26] = &#123;0&#125;;<br>    int record2[26] = &#123;0&#125;;<br>    for(int i = 0; i &lt; strlen(ransomNote); i++)&#123;<br>        record[ransomNote[i] - &#x27;a&#x27;]++;<br>    &#125;<br>    for(int i = 0; i &lt; strlen(magazine); i++)&#123;<br>        record[magazine[i] - &#x27;a&#x27;]++;<br> <br>    &#125;<br>    for(int i =0; i &lt;strlen(record); i++)&#123;<br>        if(record1[i] &gt; record2[i])<br>            return false;<br>    &#125;<br>    return true;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h3><p><img src="/../img/DaiMaSuiXiang_1/15.png"><br>思路：可以用三个for遍历三个数组，枚举出每一种可能出现的情况，</p><p>为什么不采用哈希表，而是用双指针？</p><p>——这道题目和两数之和的区别在于，要进行去重，而对三个数组去重，难度并不小，</p><p>为什么用双指针？</p><p>——a+b+c可以看成a+(b+c)，把b和c看做一个整体，然后和a进行比较，然后这里就和长度最小的子数组一样，这里滑动窗口是向内收缩</p><p>为什么要进行排序？</p><p>——因为要进行去重操作，排序可以减少去重的操作</p><p>a的去重为什么是nums[i]&#x3D;&#x3D;nums[i-1]不是nums[i]&#x3D;&#x3D;nums[i+1]</p><p>——前者是向前检查是否有重复，而后者相反，题目要求的是没有重复的三元组，但是里面的元素是可以相同的，所以如果是向后去重的话，那么就有些情况被删去了</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs [c]">//qsort辅助cmp函数<br>int cmp(const void* ptr1, const void* ptr2) &#123;<br>    return *((int*)ptr1) &gt; *((int*)ptr2);<br>&#125;<br> <br>int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) &#123;<br>    //开辟ans数组空间<br>    int **ans = (int**)malloc(sizeof(int*) * 18000);<br>    int ansTop = 0;<br>    //若传入nums数组大小小于3，则需要返回数组大小为0<br>    if(numsSize &lt; 3) &#123;<br>        *returnSize = 0;<br>        return ans;<br>    &#125;<br>    //对nums数组进行排序<br>    qsort(nums, numsSize, sizeof(int), cmp);<br>    <br> <br>    int i;<br>    //用for循环遍历数组，结束条件为i &lt; numsSize - 2(因为要预留左右指针的位置)<br>    for(i = 0; i &lt; numsSize - 2; i++) &#123;<br>        //若当前i指向元素&gt;0，则代表left和right以及i的和大于0。直接break<br>        if(nums[i] &gt; 0)<br>            break;<br>        //去重：i &gt; 0 &amp;&amp; nums[i] == nums[i-1]<br>        if(i &gt; 0 &amp;&amp; nums[i] == nums[i-1])<br>            continue;<br>        //定义左指针和右指针<br>        int left = i + 1;<br>        int right = numsSize - 1;<br>        //当右指针比左指针大时进行循环<br>        while(right &gt; left) &#123;<br>            //求出三数之和<br>            int sum = nums[right] + nums[left] + nums[i];<br>            //若和小于0，则左指针+1（因为左指针右边的数比当前所指元素大）<br>            if(sum &lt; 0)<br>                left++;<br>            //若和大于0，则将右指针-1<br>            else if(sum &gt; 0)<br>                right--;<br>            //若和等于0<br>            else &#123;<br>                //开辟一个大小为3的数组空间，存入nums[i], nums[left]和nums[right]<br>                int* arr = (int*)malloc(sizeof(int) * 3);<br>                arr[0] = nums[i];<br>                arr[1] = nums[left];<br>                arr[2] = nums[right];<br>                //将开辟数组存入ans中<br>                ans[ansTop++] = arr;<br>                //去重<br>                while(right &gt; left &amp;&amp; nums[right] == nums[right - 1])<br>                    right--;<br>                while(left &lt; right &amp;&amp; nums[left] == nums[left + 1])<br>                    left++;<br>                //更新左右指针<br>                left++;<br>                right--;<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    //设定返回的数组大小<br>    *returnSize = ansTop;<br>    *returnColumnSizes = (int*)malloc(sizeof(int) * ansTop);<br>    int z;<br>    for(z = 0; z &lt; ansTop; z++) &#123;<br>        (*returnColumnSizes)[z] = 3;<br>    &#125;<br>    return ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="18四数之和"><a href="#18四数之和" class="headerlink" title=":18四数之和"></a>:18四数之和</h3><p><img src="/../img/DaiMaSuiXiang_1/18.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int comp(const void* a, const void* b) &#123;<br>    return *(int*)a - *(int*)b;<br>&#125;<br> <br>int** fourSum(int* nums, int numsSize, int target, int* returnSize, int** returnColumnSizes) &#123;<br>    int** quadruplets = malloc(sizeof(int*) * 1001);<br>    *returnSize = 0;<br>    *returnColumnSizes = malloc(sizeof(int) * 1001);<br>    if (numsSize &lt; 4) &#123;<br>        return quadruplets;<br>    &#125;<br>    qsort(nums, numsSize, sizeof(int), comp);<br>    int length = numsSize;<br>    for (int i = 0; i &lt; length - 3; i++) &#123;<br>        if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) &#123;<br>            continue;<br>        &#125;<br>        if ((long) nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] &gt; target) &#123;<br>            break;<br>        &#125;<br>        if ((long) nums[i] + nums[length - 3] + nums[length - 2] + nums[length - 1] &lt; target) &#123;<br>            continue;<br>        &#125;<br>        for (int j = i + 1; j &lt; length - 2; j++) &#123;<br>            if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) &#123;<br>                continue;<br>            &#125;<br>            if ((long) nums[i] + nums[j] + nums[j + 1] + nums[j + 2] &gt; target) &#123;<br>                break;<br>            &#125;<br>            if ((long) nums[i] + nums[j] + nums[length - 2] + nums[length - 1] &lt; target) &#123;<br>                continue;<br>            &#125;<br>            int left = j + 1, right = length - 1;<br>            while (left &lt; right) &#123;<br>                long sum = (long) nums[i] + nums[j] + nums[left] + nums[right];<br>                if (sum == target) &#123;<br>                    int* tmp = malloc(sizeof(int) * 4);<br>                    tmp[0] = nums[i], tmp[1] = nums[j], tmp[2] = nums[left], tmp[3] = nums[right];<br>                    (*returnColumnSizes)[(*returnSize)] = 4;<br>                    quadruplets[(*returnSize)++] = tmp;<br>                    while (left &lt; right &amp;&amp; nums[left] == nums[left + 1]) &#123;<br>                        left++;<br>                    &#125;<br>                    left++;<br>                    while (left &lt; right &amp;&amp; nums[right] == nums[right - 1]) &#123;<br>                        right--;<br>                    &#125;<br>                    right--;<br>                &#125; else if (sum &lt; target) &#123;<br>                    left++;<br>                &#125; else &#123;<br>                    right--;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    return quadruplets;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="day9"><a href="#day9" class="headerlink" title="day9"></a>day9</h2><h3 id="kmp算法"><a href="#kmp算法" class="headerlink" title="kmp算法"></a>kmp算法</h3><p>什么是kmp算法？</p><p>——这是一个解决字符串匹配的一个算法</p><p>例子：</p><p>文本串:aabaabaaf</p><p>模式串：aabaaf</p><p>暴力解法：两层for循环，第一层遍历第文本串，第二层，遍历模式串，逐个匹配，当遇到不匹配的时候，重新匹配</p><p>重新匹配是指：文本串中的指针会跳，回到起始位置的下一个位置，然后重新开始匹配</p><p>kmp算法：就是一次遍历中，在文本串中找到模式串</p><p>原理是？</p><p>——在暴力破解中，我们是回到初始位置的下一个字符串开始，但是我们已经遍历过的字符串中可能会出现重复的元素，那么我们就可以跳过它，</p><p>我认为这道题也是双指针的一种用法，也可以说kmp算法是双指针的一种用法</p><p>——一个指针是文本字符串的，另外一个是模式字符串的，而暴力解法中呢，就是第一个指针不是一直往前走，而是遇到不同的时候，两个指针都往回跳，</p><p>而kmp则是第一个指针只往前走，而第二个指针回跳</p><p>我们如何知道要跳过多少？看什么？</p><p>——我们需要一个前缀表来记录，每一个字符串的最长相等前后缀（的长度）是多少，我们要看不相同元素的前一个元素的最长相等前后缀是多少，</p><p>前缀是指除尾字符串以外的所有子字符串</p><p>后缀是除首元素之外所有字符串</p><p>为什么这样子可以？</p><p>——因为第一个指针不动，第二个指针是取第一个指针前一个的最长相等前后缀第二个指针的起始位置，这个长度实际是指第二个指针在模式串跳过多少个元素后进行比较，因为是相等前后缀的原因，所以说，这跳过的x个元素，必定会和第一指针前的x个元素相等</p><h2 id="day10"><a href="#day10" class="headerlink" title="day10"></a>day10</h2><h3 id="232用栈实现队列"><a href="#232用栈实现队列" class="headerlink" title="232用栈实现队列"></a>232用栈实现队列</h3><p><img src="/../img/DaiMaSuiXiang_1/232.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs [c]">typedef struct &#123;<br>    int stackInTop, stackOutTop;<br>    int stackin[100], stackout[100];<br>&#125; MyQueue;<br> <br> <br>MyQueue* myQueueCreate() &#123;<br>    MyQueue* queue = (MyQueue*)malloc(sizeof(MyQueue));<br>    queue-&gt;stackInTop = 0;<br>    queue-&gt;stackOutTop = 0;<br>    return queue;<br>&#125;<br> <br>void myQueuePush(MyQueue* obj, int x) &#123;<br>    obj-&gt;stackin[(obj-&gt;stackInTop)++] = x;<br>&#125;<br> <br>int myQueuePop(MyQueue* obj) &#123;<br>    int stackInTop = obj-&gt;stackInTop;<br>    int stackOutTop = obj-&gt;stackOutTop;<br> <br>    if(stackOutTop == 0)&#123;<br>        while(stackInTop &gt; 0)&#123;<br>            obj-&gt;stackout[stackOutTop++] = obj-&gt;stackin[--stackInTop];<br>        &#125;       <br>    <br>    &#125;<br>    int top = obj-&gt;stackout[--stackOutTop];<br>    while(stackOutTop &gt; 0)<br>        obj-&gt;stackin[stackInTop++] = obj-&gt;stackout[--stackOutTop];<br>    <br>    obj-&gt;stackInTop = stackInTop;<br>    obj-&gt;stackOutTop = stackOutTop;<br>    return top;<br>&#125;<br> <br>int myQueuePeek(MyQueue* obj) &#123;<br>    return obj-&gt;stackin[0];<br>&#125;<br> <br>bool myQueueEmpty(MyQueue* obj) &#123;<br>    return obj-&gt;stackInTop == 0  &amp;&amp; obj-&gt;stackOutTop == 0;<br>&#125;<br> <br>void myQueueFree(MyQueue* obj) &#123;<br>    obj-&gt;stackInTop = 0;<br>    obj-&gt;stackOutTop = 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a>225. 用队列实现栈</h3><p><img src="/../img/DaiMaSuiXiang_1/225.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs [c]">typedef struct &#123;<br>    int queue[100];<br>    int front;<br>    int rear;<br>&#125; MyStack;<br> <br>MyStack* myStackCreate() &#123;<br>    MyStack* stack = (MyStack*)malloc(sizeof(MyStack));<br>    stack-&gt;front = 0;<br>    stack-&gt;rear = 0;<br>    return stack;<br>&#125;<br> <br>void myStackPush(MyStack* obj, int x) &#123; obj-&gt;queue[(obj-&gt;rear)++] = x; &#125;<br> <br>int myStackPop(MyStack* obj) &#123;<br>    int front = obj-&gt;front;<br>    int rear = obj-&gt;rear;<br> <br>    int size = rear - front;<br>    while (size-- &gt; 1) &#123;<br>        obj-&gt;queue[rear++] = obj-&gt;queue[front++];<br>    &#125;<br>    int top = obj-&gt;queue[front++];<br> <br>    obj-&gt;front = front;<br>    obj-&gt;rear = rear;<br>    return top;<br>&#125;<br> <br>int myStackTop(MyStack* obj) &#123;return obj-&gt;queue[(obj-&gt;rear) - 1];&#125;<br> <br>bool myStackEmpty(MyStack* obj) &#123; return obj-&gt;rear == obj-&gt;front; &#125;<br> <br>void myStackFree(MyStack* obj) &#123;<br>    obj-&gt;front = 0;<br>    obj-&gt;rear = 0;<br>&#125;<br> <br>/**<br> * Your MyStack struct will be instantiated and called as such:<br> * MyStack* obj = myStackCreate();<br> * myStackPush(obj, x);<br> * int param_2 = myStackPop(obj);<br> * int param_3 = myStackTop(obj);<br> * bool param_4 = myStackEmpty(obj);<br> * myStackFree(obj);<br>*/<br></code></pre></td></tr></table></figure><h2 id="day11"><a href="#day11" class="headerlink" title="day11"></a>day11</h2><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h3><p><img src="/../img/DaiMaSuiXiang_1/20.png"><br>第一种是左括号多了</p><p>——当遍历完字符串后栈里面还有元素</p><p>第二种是左右不匹配</p><p>——字符与栈顶元素不匹配</p><p>第三种是右括号多了</p><p>——栈的长度为零了，还有字符串中右方向括号还没有遍历完</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int notMatch(char par, char* stack, int stackTop) &#123;<br>    switch(par) &#123;<br>        case &#x27;]&#x27;:<br>            return stack[stackTop - 1] != &#x27;[&#x27;;<br>        case &#x27;)&#x27;:<br>            return stack[stackTop - 1] != &#x27;(&#x27;;<br>        case &#x27;&#125;&#x27;:<br>            return stack[stackTop - 1] != &#x27;&#123;&#x27;;<br>    &#125;<br>    return 0;<br>&#125;<br> <br>bool isValid(char * s)&#123;<br>    int strLen = strlen(s);<br>    //开辟栈空间<br>    char stack[5000];<br>    int stackTop = 0;<br> <br>    //遍历字符串<br>    int i;<br>    for(i = 0; i &lt; strLen; i++) &#123;<br>        //取出当前下标所对应字符<br>        char tempChar = s[i];<br>        //若当前字符为左括号，则入栈<br>        if(tempChar == &#x27;(&#x27; || tempChar == &#x27;[&#x27; || tempChar == &#x27;&#123;&#x27;)<br>            stack[stackTop++] = tempChar;<br>        //若当前字符为右括号，且栈中无元素或右括号与栈顶元素不符，返回False<br>        else if(stackTop == 0 || notMatch(tempChar, stack, stackTop))<br>            return 0;<br>        //当前字符与栈顶元素为一对括号，将栈顶元素出栈<br>        else<br>            stackTop--;<br>    &#125;<br>    //若栈中有元素，返回False。若没有元素（stackTop为0），返回True<br>    return !stackTop;<br>&#125;<br></code></pre></td></tr></table></figure><p>notMatch中为什么栈顶元素要减1</p><p>——因为代码中使用了后加加的操作，所以说stackTop其实是指向了下一位元素了</p><h3 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a>1047. 删除字符串中的所有相邻重复项</h3><p><img src="/../img/DaiMaSuiXiang_1/1047.png"><br>方法一（栈）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs [c]bush">char* removeDuplicates(char* s) &#123;<br>    int strlength = strlen(s);<br> <br>    char* stack = (char*)malloc(sizeof(char)*strlength + 1);<br>    int stackTop = 0;<br> <br>    int index = 0;<br>    while(index &lt; strlength)&#123;<br>        char letter = s[index++];<br> <br>        if(stackTop &gt; 0 &amp;&amp; letter == stack[stackTop - 1] )&#123;<br>            stackTop--;<br>        &#125;<br>        else <br>            stack[stackTop++] = letter;<br>        <br>        stack[stackTop] = &#x27;\0&#x27;;<br>      <br>    &#125;<br>      return stack;<br>    &#125;<br></code></pre></td></tr></table></figure><p>方法二（双指针）</p><p>这道题可以看作是移除元素的题目，与数组不一样的地方是字符串以’\0’结尾的，</p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs [c]">char* removeDuplicates(char* s) &#123;<br>    int fast = 0;<br>    int slow = 0; <br>    <br>    int strlength = strlen(s);<br>    while(fast &lt; strlength)<br>    &#123;<br>        char letter = s[slow] = s[fast++];<br>        if(slow &gt; 0 &amp;&amp; letter == s[slow - 1])<br>            slow--;<br>        else<br>            slow++;<br>        <br>    &#125;<br>    s[slow] = &#x27;\0&#x27;;<br>    return s;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h3 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a>150. 逆波兰表达式求值</h3><p><img src="/../img/DaiMaSuiXiang_1/150.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int evalRPN(char** tokens, int tokensSize) &#123;<br>   long long stack[MAX_TOKENS];  <br>    int top = -1; <br>    for (int i = 0; i &lt; tokensSize; i++) &#123;  <br>        if (strcmp(tokens[i], &quot;+&quot;) == 0 || strcmp(tokens[i], &quot;-&quot;) == 0 ||  <br>            strcmp(tokens[i], &quot;*&quot;) == 0 || strcmp(tokens[i], &quot;/&quot;) == 0) &#123;  <br>            long long num1 = stack[top--]; <br>            long long num2 = stack[top--]; <br>  <br>            if (strcmp(tokens[i], &quot;+&quot;) == 0) stack[++top] = num2 + num1;  <br>            if (strcmp(tokens[i], &quot;-&quot;) == 0) stack[++top] = num2 - num1;  <br>            if (strcmp(tokens[i], &quot;*&quot;) == 0) stack[++top] = num2 * num1;  <br>            if (strcmp(tokens[i], &quot;/&quot;) == 0) stack[++top] = num2 / num1; <br>        &#125; else &#123;  <br>            stack[++top] = atoi(tokens[i]); <br>        &#125;  <br>    &#125;  <br>  <br> <br>    return stack[top];  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Day12"><a href="#Day12" class="headerlink" title="Day12"></a>Day12</h2><h3 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a>239. 滑动窗口最大值</h3><p><img src="/../img/DaiMaSuiXiang_1/239.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize) &#123;<br>    int n = numsSize;<br>    int queue[n]; //队列<br>    int front = 0, rear = -1; //队首 队尾<br>    int left = 0, right = 0; //窗口左下标 窗口右下标<br>    while (right &lt; n) &#123; //窗口右移至终点<br>        while (rear &gt;= front &amp;&amp; nums[right] &gt; queue[rear]) rear--; //维护队列的单调性（非递增），即保证队首元素就是当前窗口的最大值<br>        queue[++rear] = nums[right++]; //入队下一个窗口可能的最大值<br>        if (left + k &lt;= right) &#123; //窗口大小大于k<br>            if (nums[left] == queue[front]) front++; //如果最大值已经在窗口的左边，则将它永久出队<br>            else nums[left] = queue[front]; //否则记录最大值进原数组中<br>            left++; //左框右移<br>        &#125;<br>    &#125;<br>    *returnSize = n - k + 1;<br>    return nums; //返回原数组<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347.前 K 个高频元素"></a>347.前 K 个高频元素</h3><p><img src="/../img/DaiMaSuiXiang_1/347.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs [c]">struct hash_table &#123;<br>    int key;<br>    int val;<br>    UT_hash_handle hh;<br>&#125;;<br><br>typedef struct hash_table* hash_ptr;<br><br>struct pair &#123;<br>    int first;<br>    int second;<br>&#125;;<br><br>struct pair* heap;<br>int heapSize;<br><br>void swap(struct pair* a, struct pair* b) &#123;<br>    struct pair t = *a;<br>    *a = *b, *b = t;<br>&#125;<br><br>bool cmp(struct pair* a, struct pair* b) &#123;<br>    return a-&gt;second &lt; b-&gt;second;<br>&#125;<br><br>struct pair top() &#123;<br>    return heap[1];<br>&#125;<br><br>int push(hash_ptr x) &#123;<br>    heap[++heapSize].first = x-&gt;key;<br>    heap[heapSize].second = x-&gt;val;<br>    int p = heapSize, s;<br>    while (p &gt; 1) &#123;<br>        s = p &gt;&gt; 1;<br>        if (cmp(&amp;heap[s], &amp;heap[p])) return;<br>        swap(&amp;heap[p], &amp;heap[s]);<br>        p = s;<br>    &#125;<br>&#125;<br><br>int pop() &#123;<br>    heap[1] = heap[heapSize--];<br>    int p = 1, s;<br>    while ((p &lt;&lt; 1) &lt;= heapSize) &#123;<br>        s = p &lt;&lt; 1;<br>        if (s &lt; heapSize &amp;&amp; cmp(&amp;heap[s + 1], &amp;heap[s])) s++;<br>        if (cmp(&amp;heap[p], &amp;heap[s])) return;<br>        swap(&amp;heap[p], &amp;heap[s]);<br>        p = s;<br>    &#125;<br>&#125;<br><br>int* topKFrequent(int* nums, int numsSize, int k, int* returnSize) &#123;<br>    hash_ptr head = NULL;<br>    hash_ptr p = NULL, tmp = NULL;<br><br>    for (int i = 0; i &lt; numsSize; i++) &#123;<br>        HASH_FIND_INT(head, &amp;nums[i], p);<br>        if (p == NULL) &#123;<br>            p = malloc(sizeof(struct hash_table));<br>            p-&gt;key = nums[i];<br>            p-&gt;val = 1;<br>            HASH_ADD_INT(head, key, p);<br>        &#125; else &#123;<br>            p-&gt;val++;<br>        &#125;<br>    &#125;<br><br>    heap = malloc(sizeof(struct pair) * (k + 1));<br>    heapSize = 0;<br><br>    HASH_ITER(hh, head, p, tmp) &#123;<br>        if (heapSize == k) &#123;<br>            struct pair tmp = top();<br>            if (tmp.second &lt; p-&gt;val) &#123;<br>                pop();<br>                push(p);<br>            &#125;<br>        &#125; else &#123;<br>            push(p);<br>        &#125;<br>    &#125;<br>    *returnSize = k;<br>    int* ret = malloc(sizeof(int) * k);<br>    for (int i = 0; i &lt; k; i++) &#123;<br>        struct pair tmp = top();<br>        pop();<br>        ret[i] = tmp.first;<br>    &#125;<br>    return ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="day14"><a href="#day14" class="headerlink" title="day14"></a>day14</h2><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><h4 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a>144. 二叉树的前序遍历</h4><p><img src="/../img/DaiMaSuiXiang_1/144.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs [c]">/**<br> * Definition for a binary tree node.<br> * struct TreeNode &#123;<br> *     int val;<br> *     struct TreeNode *left;<br> *     struct TreeNode *right;<br> * &#125;;<br> */<br>/**<br> * Note: The returned array must be malloced, assume caller calls free().<br> */<br> void preOder(struct TreeNode* root, int* ret, int *returnSize)&#123;<br>     if(root == NULL)<br>        return;<br>    ret[(*returnSize)++] = root-&gt;val;<br>    preOder(root-&gt;left, ret, returnSize);<br>    preOder(root-&gt;right, ret, returnSize);<br>     <br> &#125;<br>int* preorderTraversal(struct TreeNode* root, int* returnSize) &#123;<br>    int* ret = (int*)malloc(sizeof(int)*100);<br>    *returnSize = 0;<br>    preOder(root, ret, returnSize);<br>    return ret;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a>145. 二叉树的后序遍历</h4><p><img src="/../img/DaiMaSuiXiang_1/145.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs [c]">/**<br> * Definition for a binary tree node.<br> * struct TreeNode &#123;<br> *     int val;<br> *     struct TreeNode *left;<br> *     struct TreeNode *right;<br> * &#125;;<br> */<br>/**<br> * Note: The returned array must be malloced, assume caller calls free().<br> */ <br>void postOder(struct TreeNode* root, int* ret, int* returnSize)&#123;<br>    if(root == NULL)<br>        return;<br>    postOder(root-&gt;left, ret, returnSize);<br>    postOder(root-&gt;right,ret, returnSize);<br>    ret[(*returnSize)++] = root-&gt;val;<br>&#125;<br>int* postorderTraversal(struct TreeNode* root, int* returnSize) &#123;<br>    int* ret = (int*)malloc(sizeof(int)*100);<br>    *returnSize = 0;<br>    postOder(root,ret, returnSize);<br>    return  ret;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94.二叉树的中序遍历"></a>94.二叉树的中序遍历</h4><p><img src="/../img/DaiMaSuiXiang_1/94.png"></p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs [c]">/**<br> * Definition for a binary tree node.<br> * struct TreeNode &#123;<br> *     int val;<br> *     struct TreeNode *left;<br> *     struct TreeNode *right;<br> * &#125;;<br> */<br>/**<br> * Note: The returned array must be malloced, assume caller calls free().<br> */<br> void inOder(struct TreeNode* root, int* ret, int* returnSize)&#123;<br>     if(root == NULL)<br>      return;<br>    inOder(root-&gt;left, ret, returnSize);<br>    ret[(*returnSize)++] = root-&gt;val;<br>    inOder(root-&gt;right, ret, returnSize);<br> &#125;<br>int* inorderTraversal(struct TreeNode* root, int* returnSize) &#123;<br>    int* ret = (int*)malloc(sizeof(int)*100);<br>    *returnSize = 0;<br>     inOder(root, ret, returnSize);<br>     return ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><h4 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h4><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int* preorderTraversal(struct TreeNode* root, int* returnSize) &#123;<br>    int* res = malloc(sizeof(int) * 2000);<br>    *returnSize = 0;<br>    if (root == NULL) &#123;<br>        return res;<br>    &#125;<br> <br>    struct TreeNode* stk[2000];<br>    struct TreeNode* node = root;<br>    int stk_top = 0;<br>    while (stk_top &gt; 0 || node != NULL) &#123;<br>        while (node != NULL) &#123;<br>            res[(*returnSize)++] = node-&gt;val;<br>            stk[stk_top++] = node;<br>            node = node-&gt;left;<br>        &#125;<br>        node = stk[--stk_top];<br>        node = node-&gt;right;<br>    &#125;<br>    return res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后序"><a href="#后序" class="headerlink" title="后序"></a>后序</h4><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int *postorderTraversal(struct TreeNode *root, int *returnSize) &#123;<br>    int *res = malloc(sizeof(int) * 2001);<br>    *returnSize = 0;<br>    if (root == NULL) &#123;<br>        return res;<br>    &#125;<br>    struct TreeNode **stk = malloc(sizeof(struct TreeNode *) * 2001);<br>    int top = 0;<br>    struct TreeNode *prev = NULL;<br>    while (root != NULL || top &gt; 0) &#123;<br>        while (root != NULL) &#123;<br>            stk[top++] = root;<br>            root = root-&gt;left;<br>        &#125;<br>        root = stk[--top];<br>        if (root-&gt;right == NULL || root-&gt;right == prev) &#123;<br>            res[(*returnSize)++] = root-&gt;val;<br>            prev = root;<br>            root = NULL;<br>        &#125; else &#123;<br>            stk[top++] = root;<br>            root = root-&gt;right;<br>        &#125;<br>    &#125;<br>    return res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="中序"><a href="#中序" class="headerlink" title="中序"></a>中序</h4><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs [c]">int* inorderTraversal(struct TreeNode* root, int* returnSize) &#123;<br>    *returnSize = 0;<br>    int* res = malloc(sizeof(int) * 501);<br>    struct TreeNode** stk = malloc(sizeof(struct TreeNode*) * 501);<br>    int top = 0;<br>    while (root != NULL || top &gt; 0) &#123;<br>        while (root != NULL) &#123;<br>            stk[top++] = root;<br>            root = root-&gt;left;<br>        &#125;<br>        root = stk[--top];<br>        res[(*returnSize)++] = root-&gt;val;<br>        root = root-&gt;right;<br>    &#125;<br>    return res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="day15"><a href="#day15" class="headerlink" title="day15"></a>day15</h3><p><img src="/../img/DaiMaSuiXiang_1/"></p>]]></content>
    
    
    <categories>
      
      <category>c</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>明解C语言课后练习</title>
    <link href="/2024/09/15/MingJieC-exerices/"/>
    <url>/2024/09/15/MingJieC-exerices/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>printf(&quot;15减去37的结果是%d&quot;,15-37);he<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>printf(&quot;15减去37的结果是%d&quot;,15-37);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>printf(&quot;喂\n&quot;);<br>printf(&quot;      \n&quot;);<br>printf(&quot;您好\n&quot;);<br>printf(&quot;再见。\n&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main() &#123;<br>    int a = 3.14;<br>    printf(&quot;输出a的值：%d&quot;, a);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>int是整数型的 小数点后面的会被忽略 只保留整数部分 </p><h3 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main ()&#123;<br>    int a;<br>    printf(&quot;请输入一个整数：&quot;,a);<br>    scanf(&quot;%d&quot;,&amp;a);<br>    printf(&quot;该整数加去12的结果是:%d&quot;,a+6);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6"><a href="#1-6" class="headerlink" title="1.6"></a>1.6</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main ()&#123;<br>    int a;<br>    printf(&quot;请输入一个整数：&quot;,a);<br>    scanf(&quot;%d&quot;,&amp;a);<br>    printf(&quot;该整数减去6的结果是:%d&quot;,a-6);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>    puts(&quot;天&quot;);<br>    puts(&quot;地&quot;);<br>    puts(&quot;人&quot;);<br>    return  0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b;<br>int c;<br>puts(&quot;请输入两个整数：&quot;);<br>printf(&quot;整数1:&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;整数2:&quot;);    scanf(&quot;%d&quot;,&amp;b);<br>c=a*b;<br>printf(&quot;他们的乘积是：%d&quot;,c);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-9"><a href="#1-9" class="headerlink" title="1.9"></a>1.9</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b,c;<br>int d;<br>puts(&quot;请输入两个整数：&quot;);<br>printf(&quot;整数1:&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;整数2:&quot;);    scanf(&quot;%d&quot;,&amp;b);<br>printf(&quot;整数3:&quot;);    scanf(&quot;%d&quot;,&amp;c);<br>d=a+b+c;<br>printf(&quot;他们的和是：%d&quot;,d);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b;<br><br>puts(&quot;请输入两个整数：&quot;);<br>printf(&quot;整数1:&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;整数2:&quot;);    scanf(&quot;%d&quot;,&amp;b);<br>printf(&quot;a的值是b的值的%d%%&quot;,(a*100)/b);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b;<br>puts(&quot;请输入两个整数：&quot;);<br>printf(&quot;整数1:&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;整数2:&quot;);    scanf(&quot;%d&quot;,&amp;b);<br>printf(&quot;他们的和是%d,积是%d&quot;,a+b,a*b);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>    double a;<br>   <br>printf(&quot;请输入一个实数：&quot;);    scanf(&quot;%lf&quot;,&amp;a);<br>    printf(&quot;你输入的是%lf&quot;,a);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()<br>&#123;<br>int n = 0;<br>double m = 0;<br>n = 10 / 2;<br>m = 10.0 / 2.0;<br>printf(&quot;整型常量除：%d\n&quot;, 10 / 2);<br>printf(&quot;浮点型常量除：%f\n&quot;, 10.0 / 2.0);<br>printf(&quot;int型常量除：%d\n&quot;, n);<br>printf(&quot;double型常量除：%f\n&quot;, m);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5"><a href="#2-5" class="headerlink" title="2.5"></a>2.5</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b;<br><br>puts(&quot;请输入两个整数：&quot;);<br>printf(&quot;整数1:&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;整数2:&quot;);    scanf(&quot;%d&quot;,&amp;b);<br>printf(&quot;a的值是b的值的%f%%&quot;,(double)(a*100)/b);<br>return 0;&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6"><a href="#2-6" class="headerlink" title="2.6"></a>2.6</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>    int a;<br>    printf(&quot;请输入你的身高:&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>    printf(&quot;您的标准体重是%。lf公斤&quot;,(a-100)*0.9);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="3-1"><a href="#3-1" class="headerlink" title="3-1"></a>3-1</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b;<br>printf(&quot;整数a:&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;整数b:&quot;);    scanf(&quot;%d&quot;,&amp;b);<br>if(a/b)<br>puts(&quot;b不是a的约数&quot;);<br>else<br>puts(&quot;b是a的约数&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2"><a href="#3-2" class="headerlink" title="3-2"></a>3-2</h3><p>结果变得相反 </p><h3 id="3-3"><a href="#3-3" class="headerlink" title="3-3"></a>3-3</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a;<br>printf(&quot;整数a:&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>if(a==0)<br>printf(&quot;绝对值是0&quot;);<br>else if(a&gt;0)<br>printf(&quot;绝对值是%d&quot;,a);<br>else<br>printf(&quot;绝对值是%d&quot;,-a);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4"><a href="#3-4" class="headerlink" title="3-4"></a>3-4</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b;<br>printf(&quot;整数a:&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;整数b:&quot;);    scanf(&quot;%d&quot;,&amp;b);<br>if(a==b)<br>printf(&quot;a和b相等&quot;);<br>else if(a&gt;b)<br>printf(&quot;a大于b&quot;);<br>else<br>printf(&quot;a小于b&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5"><a href="#3-5" class="headerlink" title="3-5"></a>3-5</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()<br>&#123;<br>int a = 2;<br>int b = 3;<br><br>    printf(&quot;%d\n&quot;, a &gt; b);<br>    printf(&quot;%d\n&quot;, a &lt; b);<br>    printf(&quot;%d\n&quot;, a == b);<br>    printf(&quot;%d\n&quot;, a != b);<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6"><a href="#3-6" class="headerlink" title="3-6"></a>3-6</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b,c,min;<br>puts(&quot;请输入三个整数。&quot;);<br>printf(&quot;整数a:&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;整数b:&quot;);    scanf(&quot;%d&quot;,&amp;b);<br>printf(&quot;整数c:&quot;);    scanf(&quot;%d&quot;,&amp;c);<br>min=a;<br>if(b&lt;min)  min=b;<br>if(c&lt;min)  min=c;<br>printf(&quot;他们的最小值是%d&quot;,min);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7"><a href="#3-7" class="headerlink" title="3-7"></a>3-7</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b,c,d,max;<br>puts(&quot;请输入四个整数。&quot;);<br>printf(&quot;整数a:&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;整数b:&quot;);    scanf(&quot;%d&quot;,&amp;b);<br>printf(&quot;整数c:&quot;);    scanf(&quot;%d&quot;,&amp;c);<br>printf(&quot;整数d:&quot;);    scanf(&quot;%d&quot;,&amp;d);<br>max=a;<br>if(b&gt;max)  max=b;<br>if(c&gt;max)  max=c;<br>if(d&gt;max)  max=d;<br>printf(&quot;他们的最大值是%d&quot;,max);<br>return 0;<br></code></pre></td></tr></table></figure><h3 id="3-8"><a href="#3-8" class="headerlink" title="3-8"></a>3-8</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int n1,n2;<br>puts(&quot;请输入两个整数&quot;);<br>printf(&quot;整数n1：&quot;);   scanf(&quot;%d&quot;,&amp;n1);<br>printf(&quot;整数n2：&quot;);   scanf(&quot;%d&quot;,&amp;n2);<br>if(n1&gt;n2)<br>printf(&quot;他们的差是%d&quot;,n1-n2);<br>else<br>printf(&quot;他们的差是%d&quot;,n2-n1);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-9"><a href="#3-9" class="headerlink" title="3-9"></a>3-9</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int n1,n2;<br>puts(&quot;请输入两个整数&quot;);<br>printf(&quot;整数n1：&quot;);   scanf(&quot;%d&quot;,&amp;n1);<br>printf(&quot;整数n2：&quot;);   scanf(&quot;%d&quot;,&amp;n2);<br>n1==n2?printf(&quot;他们是相等数&quot;):printf(&quot;他们不是相等数&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-10"><a href="#3-10" class="headerlink" title="3-10"></a>3-10</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b,c,min;<br>puts(&quot;请输入三个整数。&quot;);<br>printf(&quot;整数a:&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;整数b:&quot;);    scanf(&quot;%d&quot;,&amp;b);<br>printf(&quot;整数c:&quot;);    scanf(&quot;%d&quot;,&amp;c);<br>if(a==b&amp;&amp;a==c)<br>printf(&quot;三个值相等&quot;);<br>else if(a!=b&amp;&amp;a!=c&amp;a!=c)<br>printf(&quot;三个值不相等&quot;);<br>else<br>printf(&quot;有两个值相等&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-11"><a href="#3-11" class="headerlink" title="3-11"></a>3-11</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b;<br>puts(&quot;请输入两个整数&quot;);<br>printf(&quot;整数a:&quot;);   scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;整数b:&quot;);   scanf(&quot;%d&quot;,&amp;b);<br>if(a-b&lt;=10||b-a&lt;=10)<br>printf(&quot;他们的差小于10&quot;);<br>else<br>printf(&quot;他们的差大于10&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-12"><a href="#3-12" class="headerlink" title="3-12"></a>3-12</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main() &#123;<br>int no, a;<br>printf(&quot;请输入一个整数：&quot;);   scanf(&quot;%d&quot;, &amp;no);<br>a=no%2;<br>switch (a)&#123;<br>case 0:puts(&quot;输入的整数是偶数&quot;);     break;<br>case 1:puts(&quot;输入的整数是奇数&quot;);     break;<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-13"><a href="#3-13" class="headerlink" title="3-13"></a>3-13</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include&lt;stdio.h&gt;<br>int main()<br>&#123;<br>int month;<br>printf(&quot;请输入月份：&quot;); scanf(&quot;%d&quot;, &amp;month);<br>switch (month)<br>&#123;<br>case 1:printf(&quot;%d月是冬季&quot;, month); break;<br>case 2:printf(&quot;%d月是冬季&quot;,month); break;<br>case 3:printf(&quot;%d月是春季&quot;,month); break;<br>case 4:printf(&quot;%d月是春季&quot;,month); break;<br>case 5:printf(&quot;%d月是春季&quot;,month); break;<br>case 6:printf(&quot;%d月是夏季&quot;,month); break;<br>case 7:printf(&quot;%d月是夏季&quot;,month); break;<br>case 8:printf(&quot;%d月是夏季&quot;,month); break;<br>case 9:printf(&quot;%d月是秋季&quot;,month); break;<br>case 10:printf(&quot;%d月是秋季&quot;,month); break;<br>case 11:printf(&quot;%d月是秋季&quot;,month); break;<br>case 12:printf(&quot;%d月是冬季&quot;,month); break;<br>default:printf(&quot;%d月不存在！&quot;,month); break;<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="4-1"><a href="#4-1" class="headerlink" title="4-1"></a>4-1</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main() &#123;<br>int no, a;<br>printf(&quot;请输入一个整数：&quot;);   scanf(&quot;%d&quot;, &amp;no);<br>int retry;<br>do&#123;<br>if(no==0)<br>puts(&quot;该整数是零&quot;);<br>else if(no&gt;0)<br>puts(&quot;该整数大于零&quot;);<br>else<br>puts(&quot;该整数小于零&quot;);<br>printf(&quot;是否继续？&lt;yes---0,no--9&gt;:&quot;);  scanf(&quot;%d&quot;,&amp;retry);<br>&#125;while(retry==0);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2"><a href="#4-2" class="headerlink" title="4-2"></a>4-2</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b;<br>printf(&quot;请输入一个整数a:&quot;);   scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;请输入一个整数b:&quot;);  scanf(&quot;%d&quot;,&amp;b);<br>int sum=0;<br>if(a&gt;b)&#123;<br>int i=b;<br>do<br>&#123;<br>sum=sum+i;<br>i=i+1;<br>&#125;while(i&lt;=a);<br>printf(&quot;大于%d小于%d的所有整数和是%d\n&quot;,b,a,sum);<br>&#125;else&#123;<br>int i=a;<br>do&#123;<br>sum=sum+i;<br>i=i+1;<br>&#125;while(i&lt;=b);<br>printf(&quot;大于%d小于%d的所有整数和是%d\n&quot;,a,b,sum);<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3"><a href="#4-3" class="headerlink" title="4-3"></a>4-3</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int n;<br>printf(&quot;请输入一个整数：&quot;);    scanf(&quot;%d&quot;,&amp;n);<br>if(n&gt;=0)&#123;<br>while(n&gt;=0)&#123;<br>printf(&quot;%d&quot;,n);<br>n--;&#125;<br>&#125;else<br>puts(&quot;&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4"><a href="#4-4" class="headerlink" title="4-4"></a>4-4</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int n;<br>printf(&quot;请输入一个整数：&quot;);    scanf(&quot;%d&quot;,&amp;n);<br>if(n&gt;=0)&#123;<br>while(n&gt;=1)&#123;<br>printf(&quot;%d&quot;,n);<br>n--;&#125;<br>&#125;else<br>puts(&quot;&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5"><a href="#4-5" class="headerlink" title="4-5"></a>4-5</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int i=1, n;<br>printf(&quot;请输入一个整数：&quot;);    scanf(&quot;%d&quot;,&amp;n);<br>if(i&gt;=0)&#123;<br>while(n&gt;=1)&#123;<br>printf(&quot;%d&quot;,i++);<br>n--;&#125;<br>&#125;else<br>puts(&quot;&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-6"><a href="#4-6" class="headerlink" title="4-6"></a>4-6</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int  no;<br>printf(&quot;请输入一个整数：&quot;);    scanf(&quot;%d&quot;,&amp;no);<br>int i;<br>while(i&lt;=no)&#123;<br>printf(&quot;%d&quot;,i);<br>i=i+2;<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-7"><a href="#4-7" class="headerlink" title="4-7"></a>4-7</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int  no;<br>printf(&quot;请输入一个正整数：&quot;);    scanf(&quot;%d&quot;,&amp;no);<br>int i;<br>while(i&lt;=no)&#123;<br>printf(&quot;%d&quot;,i);<br>i=i*2;<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-8"><a href="#4-8" class="headerlink" title="4-8"></a>4-8</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int  no;<br>printf(&quot;正整数：&quot;);    scanf(&quot;%d&quot;,&amp;no);<br>int i;<br>if(no&gt;=1)&#123;<br>while(no--&gt;1)<br>putchar(&#x27;*&#x27;);<br>putchar(&#x27;\n&#x27;);   <br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-9"><a href="#4-9" class="headerlink" title="4-9"></a>4-9</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int  n;<br>printf(&quot;请输入正整数：&quot;);    scanf(&quot;%d&quot;,&amp;n);<br>int i=1;<br>if(n&gt;=0)&#123;<br>while(i&lt;=n)&#123;<br>if(i%2==0)&#123;<br>printf(&quot;-&quot;);<br>&#125;<br>else<br>printf(&quot;+&quot;);<br>i+=1;&#125;<br><br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-10"><a href="#4-10" class="headerlink" title="4-10"></a>4-10</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int  n;<br>printf(&quot;请输入正整数：&quot;);    scanf(&quot;%d&quot;,&amp;n);<br>int i=1;<br>if(n&gt;=0)&#123;<br>while(n--&gt;0)&#123;<br>printf(&quot;-&quot;);&#125;<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-11"><a href="#4-11" class="headerlink" title="4-11"></a>4-11</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int  n;<br>do &#123;<br>printf(&quot;请输入正整数：&quot;);<br>scanf(&quot;%d&quot;, &amp;n);<br>if(n&lt;=0)&#123;<br>puts(&quot;请不要输入一个正整数。&quot;);<br>&#125;<br>&#125;while(n&lt;=0);<br>printf(&quot;该整数的逆向显示的结果是&quot;);<br>while(n&gt;0)&#123;<br>printf(&quot;%d&quot;,n%10);<br>n/=10;<br>&#125;<br>puts(&quot;。&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-12"><a href="#4-12" class="headerlink" title="4-12"></a>4-12</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int  n,cnt=0;<br>do &#123;<br>printf(&quot;请输入正整数：&quot;);<br>scanf(&quot;%d&quot;, &amp;n);<br>if(n&lt;=0)&#123;<br>puts(&quot;请不要输入一个正整数。&quot;);<br>&#125;<br>&#125;while(n&lt;=0);<br>printf(&quot;该整数的位数是&quot;);<br>while(n&gt;0)&#123;<br>n/=10;<br>cnt+=1;<br>&#125;<br>printf(&quot;%d&quot;,cnt);<br>puts(&quot;。&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-13"><a href="#4-13" class="headerlink" title="4-13"></a>4-13</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int n,sum=0,i;<br>printf(&quot;n的值是：&quot;,n);<br>scanf(&quot;%d&quot;,&amp;n);<br>for(i=0;i&lt;=n;i++)&#123;<br>sum+=1;<br>&#125;<br>printf(&quot;1到%d:%d&quot;,n,sum);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-14"><a href="#4-14" class="headerlink" title="4-14"></a>4-14</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,i;<br>printf(&quot;请输入一个整数：&quot;);<br>scanf(&quot;%d&quot;,&amp;a);<br>for(i=1;i&lt;=a;i++)&#123;<br>printf (&quot;%d&quot;,i%10);<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-15"><a href="#4-15" class="headerlink" title="4-15"></a>4-15</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,b,c;<br>printf(&quot;开始数值(cm)：&quot;);<br>scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;结束数值(cm)：&quot;);<br>scanf(&quot;%d&quot;,&amp;b);<br>printf(&quot;间隔数值(cm)：&quot;);<br>scanf(&quot;%d&quot;,&amp;c);<br><br>    for(;a&lt;=b;a+=c)&#123;<br>        printf(&quot;%dcm&quot;,a);<br>        printf(&quot;       &quot;);<br>        printf(&quot;%.2f&quot;,(double)(a-100)*0.9);<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-16"><a href="#4-16" class="headerlink" title="4-16"></a>4-16</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,i;<br>printf(&quot;整数值：&quot;);<br>scanf(&quot;%d&quot;,&amp;a);<br>for(i+=1;i&lt;=a;i++)&#123;<br>if(i%2!=0)<br>printf(&quot;%d&quot;,i);<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-17"><a href="#4-17" class="headerlink" title="4-17"></a>4-17</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,i;<br>printf(&quot;整数值：&quot;);<br>scanf(&quot;%d&quot;,&amp;a);<br>for(i+=1;i&lt;=a;i++)<br>printf(&quot;%d的二次方是:%d\n&quot;,i,i*i);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-18"><a href="#4-18" class="headerlink" title="4-18"></a>4-18</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,i;<br>printf(&quot;显示多少个*&quot;);<br>scanf(&quot;%d&quot;,&amp;a);<br>for(i+=1;i&lt;=a;i++)&#123;<br>printf(&quot;*&quot;);<br>if(i%5==0)<br>printf(&quot;\n&quot;);&#125;<br><br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-19"><a href="#4-19" class="headerlink" title="4-19"></a>4-19</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int a,i,cnt;<br>printf(&quot;整数值：&quot;);<br>scanf(&quot;%d&quot;,&amp;a);<br>for(i+=1;i&lt;=a;i++) &#123;<br>printf(&quot;*&quot;);<br>if (a % i == 0) &#123;<br>printf(&quot;\n&quot;);<br>cnt = 1;<br>&#125;<br>&#125;<br>printf(&quot;约数有:%d&quot;,cnt);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-20"><a href="#4-20" class="headerlink" title="4-20"></a>4-20</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>printf(&quot; |&quot;);<br>int i,j;<br>for(i=1;i&lt;=9;i++)&#123;<br>printf(&quot;%3d&quot;,i);<br>&#125;<br>putchar(&#x27;\n&#x27;);<br>for (i=1;i&lt;=9;i++)&#123;<br>printf(&quot;----&quot;);<br>&#125;<br>putchar(&#x27;\n&#x27;);<br>for(i=1;i&lt;=9;i++)&#123;<br>printf(&quot;%d|&quot;,i);<br>for(j=1;j&lt;=9;j++)<br>printf(&quot;%3d&quot;,i*j);<br>putchar(&#x27;\n&#x27;);<br>&#125;return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-31"><a href="#4-31" class="headerlink" title="4-31"></a>4-31</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br><br>int main() &#123;<br>int a,b,c;<br>printf(&quot;生成一个正方形。&quot;);<br>printf(&quot;正方形有几层：&quot;);    scanf(&quot;%d&quot;,&amp;a);<br>for(b=1;b&lt;=a;b++)&#123;<br>for(c=1;c&lt;=a;c++)<br>putchar(&#x27;*&#x27;);<br>putchar(&#x27;\n&#x27;);<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-22"><a href="#4-22" class="headerlink" title="4-22"></a>4-22</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main() &#123;<br>int a, b;<br>puts(&quot;让我们来画一个长方形&quot;);<br>printf(&quot;一边：&quot;);<br>scanf(&quot;%d&quot;, &amp;a);<br>printf(&quot;另一边：&quot;);<br>scanf(&quot;%d&quot;, &amp;b);<br>int h, w;<br>if (a &lt; b) &#123;<br>for (h = 1; h &lt;= a; h++) &#123;<br>for (w = 1; w &lt;= b; w++) &#123;<br>putchar(&#x27;*&#x27;);<br>&#125;<br>putchar(&#x27;\n&#x27;);<br>&#125;<br>&#125; else &#123;<br>for (h = 1; h &lt;= b; h++) &#123;<br>for (w = 1; w &lt;= a; w++) &#123;<br>putchar(&#x27;*&#x27;);<br>&#125;<br>putchar(&#x27;\n&#x27;);<br>&#125;<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-23"><a href="#4-23" class="headerlink" title="4.23"></a>4.23</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs [c]">（1）左上角的等腰三角形<br><br>#include &lt;stdio.h&gt;<br>int main()&#123;<br>int  i,j,len;<br>puts(&quot;生成直角在左上方的等腰直角三角形。&quot;);<br>printf(&quot;短边：&quot;);     scanf(&quot;%d&quot;,&amp;len);<br><br>for(i=1;i&lt;=len;i++)&#123;<br>for(j=0;j&lt;=len-i;j++)<br>putchar(&#x27;*&#x27;);<br>putchar(&#x27;\n&#x27;);&#125;<br><br>return 0;<br>&#125;<br>内循环结束了，外循环才能继续运行。<br><br>（2）右上方的等腰三角形<br><br>#include &lt;stdio.h&gt;<br>int main()&#123;<br>int  i,j,len;<br>puts(&quot;生成直角在右上方的等腰直角三角形。&quot;);<br>printf(&quot;短边：&quot;);     scanf(&quot;%d&quot;,&amp;len);<br><br>for(i=0;i&lt;=len;i++)&#123;<br>for(j=1;j&lt;=len-i;j++)<br>putchar(&#x27;*&#x27;);<br>for(j=0;j&lt;=i;j++)<br>putchar(&#x27; &#x27;);<br>putchar(&#x27;\n&#x27;);&#125;<br><br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-24"><a href="#4-24" class="headerlink" title="4-24"></a>4-24</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int  i,j,len;<br>puts(&quot;让我们来画一个金字塔。&quot;);<br>printf(&quot;金字塔有几层：&quot;);     scanf(&quot;%d&quot;,&amp;len);<br>for(i=1;i&lt;=len;i++)&#123;<br>for(j=1;j&lt;=len-i;j++)<br>printf(&quot; &quot;);       /*输出左边的空格*/<br>for(j=1;j&lt;=(i-1);j++)<br>printf(&quot;*&quot;);      /*左侧的*号*/<br>printf(&quot;*&quot;);          /*中间的*号*/<br>for(j=1;j&lt;=(i-1);j++)<br>printf(&quot;*&quot;);         /*右侧的*号*/<br>printf(&quot;\n&quot;);<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-25"><a href="#4-25" class="headerlink" title="4-25"></a>4-25</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int  i,j,len;<br>puts(&quot;让我们来画一个向下金字塔。&quot;);<br>printf(&quot;金字塔有几层：&quot;);     scanf(&quot;%d&quot;,&amp;len);<br>for(i=1;i&lt;=len;i++)&#123;<br>for(j=1;j&lt;=i-1;j++)<br>printf(&quot; &quot;);       /*输出左边的空格*/<br>for(j=1;j&lt;=len-i;j++)<br>printf(&quot;%d&quot;,i%10);      /*左侧的*号*/<br>printf(&quot;%d&quot;,i%10);          /*中间的*号*/<br>for(j=1;j&lt;=len-i;j++)<br>printf(&quot;%d&quot;,i%10);         /*右侧的*号*/<br>printf(&quot;\n&quot;);<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h3 id="5-1"><a href="#5-1" class="headerlink" title="5-1"></a>5-1</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int i;<br>int v[5];<br>for(i=0;i&lt;5;i++)<br>v[i]=i;<br>for(i=0;i&lt;5;i++)<br>printf(&quot;[%d]=%d\n&quot;,i,v[i]);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>&lt;&gt;5-2 </p><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int i,c=5;<br>int v[5];<br>for(i=0;i&lt;5;i++)<br>v[i]=i+1;<br>for(i=0;i&lt;5;i++) &#123;<br>c--;<br>printf(&quot;[%d]=%d\n&quot;, i, v[c]);<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3"><a href="#5-3" class="headerlink" title="5-3"></a>5-3</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int i;<br>int v[5]=&#123;5,4,3,2,1&#125;;<br>for(i=0;i&lt;5;i++)<br>printf(&quot;v[%d]=%d\n&quot;,i,v[i]);<br>return 0;<br>&#125;<br><br>#include &lt;stdio.h&gt;<br>int main()&#123;<br>int i;<br>int a[5]=&#123;5,4,3,2,1&#125;;<br>int b[5];<br>for(i=0;i&lt;5;i++)<br>b[i]=a[i];<br>puts(&quot;   a   b&quot;);<br>puts(&quot;---------&quot;);<br>for (i=0;i&lt;5;i++)<br>printf(&quot;%4d%4d\n&quot;,a[i],b[i]);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4"><a href="#5-4" class="headerlink" title="5-4"></a>5-4</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int i;<br>int a[5]=&#123;36,23,17&#125;;<br>int b[5];<br>for(i=0;i&lt;5;i++)<br>b[4-i]=a[i];<br>puts(&quot;   a   b&quot;);<br>puts(&quot;---------&quot;);<br>for (i=0;i&lt;5;i++)<br>printf(&quot;%4d%4d\n&quot;,a[i],b[i]);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-5"><a href="#5-5" class="headerlink" title="5-5"></a>5-5</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>#define NUMBER 7   /*数组元素总数*/<br>int main()&#123;<br>int i;<br>int x[NUMBER];<br>for(i=0;i&lt;NUMBER;i++)&#123;<br>printf(&quot;x[%d]:&quot;,i);<br>scanf(&quot;%d&quot;,&amp;x[i]);<br>&#125;<br>for (i=0;i&lt;NUMBER-4;i++)&#123;<br>int temp=x[i];<br>x[i]=x[NUMBER-1-i];<br>x[NUMBER-1-i]=temp;<br>&#125;<br>puts(&quot;倒序排列了。&quot;);<br>for(i=0;i&lt;NUMBER;i++)<br>printf(&quot;x[%d]=%d\n&quot;,i,x[i]);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-6"><a href="#5-6" class="headerlink" title="5-6"></a>5-6</h3><h3 id="a-1-0-b-1"><a href="#a-1-0-b-1" class="headerlink" title="a&#x3D;1.0   b&#x3D;1"></a>a&#x3D;1.0   b&#x3D;1</h3><h3 id="5-7"><a href="#5-7" class="headerlink" title="5-7"></a>5-7</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>#define NUMBER 100    /*数组元素总数*/<br>int main()&#123;<br>int a,i;<br>int x[NUMBER];<br>printf(&quot;数据个数：&quot;);   scanf(&quot;%d&quot;,&amp;a);<br><br>for(i=0;i&lt;a;i++)&#123;<br>printf(&quot;x[%d]号:&quot;,i+1);<br>scanf(&quot;%d&quot;,&amp;x[i]);<br>&#125;<br>putchar(&#x27;&#123;&#x27;);<br>printf(&quot;%d&quot;,x[0]);<br>for(i=1;i&lt;a;i++)<br>&#123;<br>printf(&quot;， %d&quot;,x[i]);<br>&#125;<br>printf(&quot;&#125;\n&quot;);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-8"><a href="#5-8" class="headerlink" title="5-8&lt;\p&gt;"></a>5-8&lt;\p&gt;</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>#define NUMBER 80   /*数组元素总数*/<br>int main()&#123;<br>int i,j;<br>int num;<br>int tensu[NUMBER];<br>int bunpu[11]=&#123;0&#125;;<br><br>    printf(&quot;请输入学生的人数：&quot;);<br>    do&#123;<br>        scanf(&quot;%d&quot;,&amp;num);<br>        if(num&lt;1||num&gt;NUMBER)<br>            printf(&quot;\a请输入1~%d的数： &quot;,NUMBER);<br>    &#125;while (num&lt;1||num&gt;NUMBER);<br> <br>    printf(&quot;请输入%d人的分数。\n&quot;,num);<br> <br>    for(i=0;i&lt;num;i++)&#123;<br>        printf(&quot;%2d号:&quot;,i+1);<br>        do&#123;<br>            scanf(&quot;%d&quot;,&amp;tensu[i]);<br>            if (tensu[i] &lt; 0 || tensu[i] &gt; 100)<br>                printf(&quot;\a请输入1~100的数：&quot;);<br>        &#125;while(tensu[i]&lt;0||tensu[i]&gt;100);<br>        bunpu[tensu[i]/10]++;<br>    &#125;<br> <br>    puts(&quot;\n----分布图-----&quot;);<br> <br>    for(i=0;i&lt;=9;i++)&#123;<br>        printf(&quot;%3d-%3d：&quot;,i*10,i*10+9);<br>        for(j=0;j&lt;=bunpu[i];j++)<br>            putchar(&#x27;*&#x27;);<br>        putchar(&#x27;\n&#x27;);<br>    &#125;<br>    <br>    printf(&quot;    100:&quot;);<br>    for(j=0;j&lt;bunpu[10];j++)&#123;<br>        putchar(&#x27;*&#x27;);&#125;<br>    putchar(&#x27;\n&#x27;);<br>    return 0;<br> <br><br>### 5-9 <br>``` [c] bush                                                                                                           <br>#include &lt;stdio.h&gt;<br><br>#define NUMBER 80<br><br>int main()<br>&#123;<br>int i,j;<br>int num;<br>int score[NUMBER];<br>int scattergram[11]=&#123;0&#125;;<br>int max;<br>int max_x;<br><br>    printf(&quot;请输入学生人数：&quot;);<br> <br>    do&#123;<br>        scanf(&quot;%d&quot;,&amp;num);<br>        if(num&lt;1 || num&gt;NUMBER)<br>            printf(&quot;请输入1~%d之间的整数：&quot;,NUMBER);<br>    &#125;while(num&lt;1 || num&gt;NUMBER);<br> <br>    printf(&quot;请输入%d人的分数。\n&quot;,num);<br>    for(i=0;i&lt;num;i++)<br>    &#123;<br>        printf(&quot;%d号：&quot;,i+1);<br>        do&#123;<br>            scanf(&quot;%d&quot;,&amp;score[i]);<br>            if(score[i]&lt;0 || score[i]&gt;100)<br>            &#123;<br>                printf(&quot;请输入0~100之间的整数：&quot;);<br>            &#125;<br>        &#125;while(score[i]&lt;0 || score[i]&gt;100);<br>        scattergram[score[i]/10]++;<br>    &#125;<br> <br>    max=scattergram[0];<br>    for(i=1;i&lt;11;i++)<br>    &#123;<br>        if(scattergram[i]&gt;max)<br>            max=scattergram[i];<br>    &#125;     /*确定最高层数*/<br> <br>    max_x=max;<br>    for(i=0;i&lt;max_x;i++)<br>    &#123;<br>        for(j=0;j&lt;11;j++)<br>        &#123;<br>            if(max&gt;scattergram[j])<br>                printf(&quot;    &quot;);<br>            else<br>                printf(&quot;*   &quot;);<br>        &#125;<br>        putchar(&#x27;\n&#x27;);<br> <br>        max -= 1;<br>    &#125;<br>    printf(&quot;--------------------------------------------\n&quot;);<br> <br>    for(i=1;i&lt;=11;i++)<br>    &#123;<br>        printf(&quot; %d &quot;,(i-1)*10);<br>    &#125;<br> <br>    putchar(&#x27;\n&#x27;);<br> <br>    return 0;<br>&#125;<br><br>垂直的直方图其实是一层一层打印出来的      if句确定他的最高层   然后再循环<br></code></pre></td></tr></table></figure><h3 id="5-10"><a href="#5-10" class="headerlink" title="5-10"></a>5-10</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main() &#123;<br>int i, j, k;<br>int tensu1[4][3], tensu2[3][4];<br>int product[4][4] = &#123;0&#125;;<br><br>    puts(&quot;请输入第一个矩阵的具体元素&quot;);<br>    for (i = 0; i &lt; 4; i++) &#123;<br>        for (j = 0; j &lt; 3; j++) &#123;<br>            printf(&quot;tensu1[%d][%d]: &quot;, i, j);<br>            scanf(&quot;%d&quot;, &amp;tensu1[i][j]);<br>        &#125;<br>    &#125;<br> <br>    puts(&quot;请输入第二个矩阵的具体元素&quot;);<br>    for (i = 0; i &lt; 3; i++) &#123;<br>        for (j = 0; j &lt; 4; j++) &#123;<br>            printf(&quot;tensu2[%d][%d]: &quot;, i, j);<br>            scanf(&quot;%d&quot;, &amp;tensu2[i][j]);<br>        &#125;<br>    &#125;<br> <br>    for (i = 0; i &lt; 4; i++) &#123;<br>        for (j = 0; j &lt; 4; j++) &#123;<br>            for (k = 0; k &lt; 3; k++) &#123;<br>                product[i][j] += tensu1[i][k] * tensu2[k][j];<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    puts(&quot;显示矩阵1：&quot;);<br>    for (i = 0; i &lt; 4; i++) &#123;<br>        for (j = 0; j &lt; 3; j++) &#123;<br>            printf(&quot;%6d&quot;, tensu1[i][j]);<br>        &#125;<br>        putchar(&#x27;\n&#x27;);<br>    &#125;<br> <br>    puts(&quot;显示矩阵2：&quot;);<br>    for (i = 0; i &lt; 3; i++) &#123;<br>        for (j = 0; j &lt; 4; j++) &#123;<br>            printf(&quot;%6d&quot;, tensu2[i][j]);<br>        &#125;<br>        putchar(&#x27;\n&#x27;);<br>    &#125;<br> <br>    puts(&quot;显示乘积矩阵：&quot;);<br>    for (i = 0; i &lt; 4; i++) &#123;<br>        for (j = 0; j &lt; 4; j++) &#123;<br>            printf(&quot;%6d&quot;, product[i][j]);<br>        &#125;<br>        putchar(&#x27;\n&#x27;);<br>    &#125;<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-11"><a href="#5-11" class="headerlink" title="5-11"></a>5-11</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main() &#123;<br>int i, j=1;<br>int tensu1[6], tensu2[6];<br>int sum1=0, sum2=0, sum3=0;<br>puts(&quot;请输入六名学生的两门成绩&quot;);<br><br>    do&#123;j+=1;<br>        for (i = 0; i &lt; 6; i++) &#123;<br>            printf(&quot;%d号  &quot;, i + 1);<br>            do &#123;<br>                printf(&quot;语文：&quot;);<br>                scanf(&quot;%d&quot;, &amp;tensu1[i]);<br>                if (tensu1[i] &lt; 0 || tensu1[i] &gt; 100)<br>                    printf(&quot;请输入1~100的数：&quot;);<br>            &#125; while (tensu1[i] &lt; 0 || tensu1[i] &gt; 100);<br>            sum2 += tensu1[i];<br>        &#125;<br> <br>        for (i = 0; i &lt; 6; i++) &#123;<br>            printf(&quot;%d号  &quot;, i + 1);<br>            do &#123;<br>                printf(&quot;数学：&quot;);<br>                scanf(&quot;%d&quot;, &amp;tensu2[i]);<br>                if (tensu2[i] &lt; 0 || tensu2[i] &gt; 100)<br>                    printf(&quot;请输入1~100的数：&quot;);<br>            &#125; while (tensu2[i] &lt; 0 || tensu2[i] &gt; 100);<br>            sum3 += tensu2[i];<br>        &#125;<br> <br>        for (i = 0; i &lt; 6; i++) &#123;<br>            sum1 = tensu1[i] + tensu2[i];<br>            printf(&quot;%d号两门总分为%d,平均分为%.2f   &quot;,i+1,sum1, (double) sum1 / 2);<br>            putchar(&#x27;\n&#x27;);<br>        &#125;<br>     putchar(&#x27;\n&#x27;);<br>    &#125;while(j&gt;6);<br>    <br>    printf(&quot;语文的总分：%5d,平均分:%.2f\n&quot;,sum2,(double)sum2/6);<br>    printf(&quot;数学的总分：%5d,平均分:%.2f\n&quot;,sum3,(double)sum3/6);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-12"><a href="#5-12" class="headerlink" title="5-12"></a>5-12</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()<br>&#123;<br>int i,j,k;<br>int course[2][4][3]=&#123;&#123;&#123;91,63,78&#125;,&#123;67,72,46&#125;,&#123;89,34,53&#125;,&#123;32,54,34&#125;&#125;,<br>&#123;&#123;97,67,82&#125;,&#123;73,43,46&#125;,&#123;97,56,21&#125;,&#123;85,46,35&#125;&#125;&#125;;<br><br>    for(i=0;i&lt;2;i++)<br>    &#123;<br>        printf(&quot;第%d次考试的分数\n&quot;,i+1);<br>        for(j=0;j&lt;4;j++)<br>        &#123;<br>            printf(&quot;%d:&quot;,j+1);<br>            for(k=0;k&lt;3;k++)<br>            &#123;<br>                printf(&quot;%4d&quot;,course[i][j][k]);<br>            &#125;<br>            putchar(&#x27;\n&#x27;);<br>        &#125;<br>        putchar(&#x27;\n&#x27;);<br>    &#125;<br>    <br>    puts(&quot;总分&quot;);<br>    for(i=0;i&lt;1;i++)<br>    &#123;<br>        for(j=0;j&lt;4;j++)<br>        &#123;<br>            printf(&quot;%d:&quot;,j+1);<br>            for(k=0;k&lt;3;k++)<br>            &#123;<br>                printf(&quot;%4d&quot;,course[i][j][k]+course[i+1][j][k]);<br>            &#125;<br>            putchar(&#x27;\n&#x27;);<br>        &#125;<br>    &#125;<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h3><h3 id="6-1"><a href="#6-1" class="headerlink" title="6-1"></a>6-1</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int min2(int a,int b) &#123;<br>if (a &lt; b)<br>return a;<br>else<br>return b;<br>&#125;<br>int main()&#123;<br>int a,b;<br>puts(&quot;请输入两个整数：&quot;);<br>printf(&quot;整数a:&quot;);   scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;整数b:&quot;);   scanf(&quot;%d&quot;,&amp;b);<br>printf(&quot;最小值是%d。\n&quot;,min2(a,b));<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2"><a href="#6-2" class="headerlink" title="6-2"></a>6-2</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int min3(int a,int b,int c) &#123;<br>int min=a;<br>if(b&lt;min)     b=min;<br>if(c&lt;min)     c=min;<br>return min ;<br>&#125;<br><br>    int main()&#123;<br>        int a,b,c;<br>        puts(&quot;请输入三个整数：&quot;);<br>        printf(&quot;整数a:&quot;);   scanf(&quot;%d&quot;,&amp;a);<br>        printf(&quot;整数b:&quot;);   scanf(&quot;%d&quot;,&amp;b);<br>        printf(&quot;整数c:&quot;);   scanf(&quot;%d&quot;,&amp;c);<br>        printf(&quot;最小值是%d。\n&quot;,min3(a,b,c));<br>        return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3"><a href="#6-3" class="headerlink" title="6-3"></a>6-3</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int cbue(int x) &#123;<br>return x*x*x;<br>&#125;<br>int main()&#123;<br>int x;<br>printf(&quot;请输入一个整数：&quot;);<br>scanf(&quot;%d&quot;,&amp;x);<br>printf(&quot;该整数的立方是：%d&quot;,cbue(x));<br>return 0;<br>&#125;<br>6-4<br>#include &lt;stdio.h&gt;<br>int  spr(int x) &#123;<br>return x*x;<br>&#125;<br>int pow4(int x)&#123;<br>return spr(x*x);<br>&#125;<br>int main()&#123;<br>int x;<br>printf(&quot;请输入一个整数：&quot;);<br>scanf(&quot;%d&quot;,&amp;x);<br>printf(&quot;该整数的四次方是：%d&quot;,pow4(x));<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-5"><a href="#6-5" class="headerlink" title="6-5"></a>6-5</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int  sumup(int n) &#123;<br>int i;<br>int tmp=0;<br>for(i=1;i&lt;=n;i++)<br>tmp+=i;<br>return tmp;<br><br>&#125;<br>int main()&#123;<br>int a;<br>printf(&quot;请输n的值：&quot;);<br>scanf(&quot;%d&quot;,&amp;a);<br>printf(&quot;从1到%d和是：%d&quot;,a, sumup(a));<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-6"><a href="#6-6" class="headerlink" title="6-6"></a>6-6</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>void alert(int n) &#123;<br>while(n--&gt;0)<br>putchar(&#x27;\a&#x27;);<br><br>&#125;<br>int main()&#123;<br>int a;<br>printf(&quot;请输入多少次铃声&quot;);<br>scanf(&quot;%d&quot;,&amp;a);<br>alert(a);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-7"><a href="#6-7" class="headerlink" title="6-7"></a>6-7</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>void hello(void)&#123;<br>printf(&quot;你好.\n&quot;);<br>&#125;<br>int main()&#123;<br>hello();<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-8"><a href="#6-8" class="headerlink" title="6-8"></a>6-8</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>#define NUMBER 5<br>int min_of(const int v[],int n)&#123;<br>int i;<br>int min=v[0];<br>for(i=1;i&lt;n;i++)<br>if(v[i]&lt;min)<br>min=v[i];<br>return min;<br>&#125;<br>int main()&#123;<br>int i;<br>int v[NUMBER]=&#123;0&#125;;<br>printf(&quot;请输入%d个元素:&quot;,NUMBER);<br>for (i=0;i&lt;NUMBER;i++)<br>&#123;<br>printf(&quot;%d：&quot;,i+1);<br>scanf(&quot;%d&quot;,&amp;v[i]);<br>&#125;<br>printf(&quot;最小值是%d。\n&quot;,min_of(v,NUMBER));<br>return 0;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-9"><a href="#6-9" class="headerlink" title="6-9"></a>6-9</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>#define NUMBER 7<br><br>void rev_intary(int v[],int n)&#123;<br>int i;<br>for(i=0;i&lt;n-4;i++)<br>&#123;<br>int temp=v[i];<br>v[i] =v[n-1-i];<br>v[n-1-i]=temp;<br>&#125;<br><br>&#125;<br><br>int main()&#123;<br>int i;<br>int x[NUMBER];<br>for(i=0;i&lt;NUMBER;i++) &#123;<br>printf(&quot;x[%d]&quot;, i);<br>scanf(&quot;%d&quot;, &amp;x[i]);<br>&#125;<br>rev_intary(x,NUMBER);<br><br>    puts(&quot;倒序排列了！&quot;);<br> <br>    for (i=0;i&lt;NUMBER;i++)<br>    &#123;<br>        printf(&quot;x[%d]：%d\n&quot;,i,x[i]);<br>    &#125;<br> <br>    return 0;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-10"><a href="#6-10" class="headerlink" title="6-10"></a>6-10</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>#define NUMBER 7<br><br>void rev_intary(int v[], int n) &#123;<br>int i;<br>for (i = 0; i &lt; n / 2; i++) &#123;<br>int temp = v[i];<br>v[i] = v[n - 1 - i];<br>v[n - 1 - i] = temp;<br>&#125;<br>&#125;<br><br>void intary_rcpy(int v1[], const int v2[], int n) &#123;<br>int i;<br>for (i = 0; i &lt; n; i++) &#123;<br>v1[i] = v2[i];<br>&#125;<br>&#125;<br><br>int main() &#123;<br>int i;<br>int v1[NUMBER];<br>int v2[NUMBER];<br><br>    for (i = 0; i &lt; NUMBER; i++) &#123;<br>        printf(&quot;v[%d]: &quot;, i);<br>        scanf(&quot;%d&quot;, &amp;v2[i]);<br>    &#125;<br>    <br>    rev_intary(v2, NUMBER);<br>    intary_rcpy(v1, v2, NUMBER);<br> <br>    puts(&quot;倒序排列了！&quot;);<br> <br>    for (i = 0; i &lt; NUMBER; i++) &#123;<br>        printf(&quot;v2[%d]: %d\n&quot;, i, v2[i]);<br>    &#125;<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-11"><a href="#6-11" class="headerlink" title="6-11"></a>6-11</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>#define NUMBER 7<br>#define FAILED -1<br><br>int search_idx(const int v[], int idx[], int key, int n) &#123;<br>int i;<br>int temp = 0;<br><br>    for (i = 0; i &lt; n; i++) &#123;<br>        if (v[i] == key) &#123;<br>            idx[temp] = i;<br>            temp += 1;<br>        &#125;<br>    &#125;<br>    return (temp &gt; 0) ? temp : FAILED;<br>&#125;<br><br>int main() &#123;<br>int i, ky, y;<br>int idx[NUMBER], vx[NUMBER + 1];<br>for (i = 0; i &lt; NUMBER; i++) &#123;<br>printf(&quot;vx[%d]:&quot;, i);<br>scanf(&quot;%d&quot;, &amp;vx[i]);<br>&#125;<br>printf(&quot;要查找的值:&quot;);<br>scanf(&quot;%d&quot;, &amp;ky);<br>y = search_idx(vx, idx, ky, NUMBER);<br>if (y == FAILED)<br>puts(&quot;\a查找失败。&quot;);<br>else<br>printf(&quot;%d&quot;, y);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-12"><a href="#6-12" class="headerlink" title="6-12"></a>6-12</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>void mat_mul(const int a[4][3],const int b [3][4],int c[4][3])&#123;<br>int i, j, k;<br><br>    for (i = 0; i &lt; 4; i++) &#123;<br>        for (j = 0; j &lt; 3; j++) &#123;<br>            c[i][j] = 0; &#125;<br>            for (k = 0; k &lt; 3; k++) &#123;<br>                c[i][j] += a[i][k] * b[k][j];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>int main()&#123;<br>int i,j;<br>int tensu1[4][3],tensu2[3][4],tensu3[3][3];<br>puts(&quot;请输入4行3列矩阵元素&quot;);<br>for(i=0;i&lt;4;i++)&#123;<br>for(j=0;j&lt;3;j++)&#123;<br>printf(&quot;tensu[%d][%d]=&quot;,i,j);<br>scanf(&quot;%d&quot;,&amp;tensu1[i][j]);<br>&#125;<br>&#125;<br>puts(&quot;请输入3行4列矩阵元素&quot;);<br>for(i=0;i&lt;3;i++)&#123;<br>for(j=0;j&lt;4;j++)&#123;<br>printf(&quot;[tensu2[%d][%d]=&quot;,i,j);<br>scanf(&quot;%d&quot;,&amp;tensu1[i][j]);<br>&#125;<br>&#125;<br>mat_mul(tensu1,tensu2,tensu3);<br>printf(&quot;两个矩阵的乘积为:\n&quot;);<br>for (i = 0; i &lt; 4; i++) &#123;<br>for (j = 0; j &lt; 3; j++) &#123;<br>printf(&quot;%4d&quot;, tensu3[i][j]);<br>&#125;<br>putchar(&#x27;\n&#x27;);<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-13"><a href="#6-13" class="headerlink" title="6-13"></a>6-13</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br><br>void mat_add(const int a[4][3], const int b[4][3], int c[2][4][3]) &#123;<br>int i, j;<br><br>    for (i = 0; i &lt; 4; i++) &#123;<br>        for (j = 0; j &lt; 3; j++) &#123;<br>            c[0][i][j] = a[i][j]; // 存储第一次考试的分数<br>            c[1][i][j] = b[i][j]; // 存储第二次考试的分数<br>        &#125;<br>    &#125;<br>&#125;<br><br>void mat_print(const int m[4][3]) &#123;<br>int i, j;<br><br>    for (i = 0; i &lt; 4; i++) &#123;<br>        for (j = 0; j &lt; 3; j++) &#123;<br>            printf(&quot;%4d&quot;, m[i][j]);<br>        &#125;<br>        putchar(&#x27;\n&#x27;);<br>    &#125;<br>&#125;<br><br>int main() &#123;<br>int tensu1[4][3] = &#123;&#123;91, 63, 78&#125;, &#123;67, 72, 46&#125;, &#123;89, 34, 53&#125;, &#123;32, 54, 34&#125;&#125;;<br>int tensu2[4][3] = &#123;&#123;97, 67, 82&#125;, &#123;73, 43, 46&#125;, &#123;97, 56, 21&#125;, &#123;85, 46, 35&#125;&#125;;<br>int sum[2][4][3];<br><br>    mat_add(tensu1, tensu2, sum);<br>    puts(&quot;第一次考试的分数&quot;);<br>    mat_print(tensu1);<br>    puts(&quot;第二次考试的分数&quot;);<br>    mat_print(tensu2);<br>    puts(&quot;总分（储存在三维数组中）&quot;);<br>    for (int i = 0; i &lt; 2; i++) &#123;<br>        for (int j = 0; j &lt; 4; j++) &#123;<br>            for (int k = 0; k &lt; 3; k++) &#123;<br>                printf(&quot;%4d&quot;, sum[i][j][k]);<br>            &#125;<br>            putchar(&#x27;\n&#x27;);<br>        &#125;<br>    &#125;<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-14"><a href="#6-14" class="headerlink" title="6-14"></a>6-14</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int fx;<br>int main()&#123;<br>int i;<br>static double sa[5];<br>for(i=0;i&lt;5;i++)<br>printf(&quot;sa[%d]=%.1f\n&quot;,i,sa[i]);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-15"><a href="#6-15" class="headerlink" title="6-15"></a>6-15</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int x;<br>void put_count()&#123;<br>printf(&quot;put_count:第%d次&quot;,x+1);<br>x++;<br>putchar(&#x27;\n&#x27;);<br>&#125;<br>int main ()&#123;<br>int i,j;<br>printf(&quot;要调用多少次：&quot;);<br>scanf(&quot;%d&quot;,&amp;i);<br>for(j=0;j&lt;i;j++)&#123;<br>put_count();<br><br>    &#125;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><h3 id="8-1"><a href="#8-1" class="headerlink" title="8-1"></a>8-1</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br><br>#define diff(x,y) ((x)-(y))<br><br>int main()<br>&#123;<br>int x,y;<br><br>    printf(&quot;请输入两个整数：&quot;);<br>    scanf(&quot;%d %d&quot;,&amp;x,&amp;y);<br>    printf(&quot;两数之差为%d。\n&quot;,x&gt;y?diff(x,y):diff(y,x));<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3"><a href="#8-3" class="headerlink" title="8-3"></a>8-3</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br><br>#define swap(type,a,b) &#123;type temp;temp=(a);(a)=(b);(b)=temp;&#125;<br><br>int main()<br>&#123;<br>int x,y;<br><br>    printf(&quot;x = &quot;);    scanf(&quot;%d&quot;,&amp;x);<br>    printf(&quot;y = &quot;);    scanf(&quot;%d&quot;,&amp;y);<br>    swap(int,x,y);<br>    printf(&quot;这两个数已经互换了。\n&quot;);<br>    printf(&quot;x = %d\n&quot;,x);<br>    printf(&quot;y = %d\n&quot;,y);<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4"><a href="#8-4" class="headerlink" title="8-4"></a>8-4</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br># define NUMBER 5<br>void bsort(int a[],int n)&#123;<br>int i,j;<br>for(i=n-1;i&gt;0;i--)&#123;<br>for(j=0;j&lt;i;j++)&#123;<br>if(a[j]&lt;a[j+1])&#123;<br>int temp =a[j];<br>a[j]=a[j+1];<br>a[j+1]=temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>int main()&#123;<br>int i;<br>int height[NUMBER];<br>printf(&quot;请输入%d人的身高。\n&quot;,NUMBER);<br>for(i=0;i&lt;NUMBER;i++)&#123;<br>printf(&quot;%2d号：&quot;,i+1);<br>scanf(&quot;%d&quot;,&amp;height[i]);<br>&#125;<br>bsort(height,NUMBER);<br>puts(&quot;按降序排列。&quot;);<br>for(i=0;i&lt;NUMBER;i++)&#123;<br>printf(&quot;%2d号：%d\n&quot;,i+1,height[i]);<br><br>    &#125;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-5"><a href="#8-5" class="headerlink" title="8-5"></a>8-5</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>enum sex &#123;male,female&#125;;<br>enum season    &#123;spring=1,summer,autumn,winter&#125;;<br><br>void select_sex(enum sex m)&#123;<br>switch(m)&#123;<br>case male:printf(&quot;先生&quot;); break;<br>case female:printf(&quot;女士&quot;);break;<br>default :printf(&quot;请正确选择性别！&quot;);  break;<br>&#125;<br>&#125;<br><br>void select_season (int n)&#123;<br>switch (n)<br>&#123;<br>case spring    :    puts(&quot;你最喜欢的是春季。&quot;);        break;<br>case summer    :    puts(&quot;你最喜欢的是夏季。&quot;);        break;<br>case autumn    :    puts(&quot;你最喜欢的是秋季。&quot;);        break;<br>case winter    :    puts(&quot;你最喜欢的是冬季。&quot;);        break;<br>default        :    puts(&quot;请正确选择季节。&quot;);        break;<br>&#125;<br><br>&#125;<br>int main()<br>&#123;<br>enum sex a;<br>int b;<br><br>    printf(&quot;请选择你的性别【0…男士】【1…女士)】：&quot;);<br>    scanf(&quot;%d&quot;,&amp;a);<br> <br>    printf(&quot;你最喜欢的季节是【1…春季】【2…夏季】【3…秋季】【4…冬季】：&quot;);<br>    scanf(&quot;%d&quot;,&amp;b);<br> <br>    select_sex(a);<br>    select_season(b);<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-6"><a href="#8-6" class="headerlink" title="8-6"></a>8-6</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int factorial(int n) &#123;<br>int result = 1;<br><br>    for (int i = 1; i &lt;= n; i++) <br>        result *= i;<br>    return result;<br>&#125;<br><br>int main() &#123;<br>int num;<br>printf(&quot;请输入一个整数：&quot;);<br>scanf(&quot;%d&quot;, &amp;num);<br><br>    if (num &lt; 0) &#123;<br>        printf(&quot;阶乘只定义于非负整数。\n&quot;);<br>    &#125; else &#123;<br>        printf(&quot;该整数的阶乘为 %d.\n&quot;, factorial(num));<br>    &#125;<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-7"><a href="#8-7" class="headerlink" title="8-7###"></a>8-7###</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include&lt;stdio.h&gt;<br><br>int combination(int n,int r);<br><br>int main(void)<br>&#123;<br>int n;<br>int r;<br><br>    do<br>    &#123;<br>        printf(&quot;请输入整数n：&quot;);<br>        scanf(&quot;%d&quot;,&amp;n);<br>        printf(&quot;请输入整数r：&quot;);<br>        scanf(&quot;%d&quot;,&amp;r);<br>        if(n&lt;=0||r&lt;0||n&lt;r)<br>        &#123;<br>            puts(&quot;请输入正确数量！&quot;);<br>        &#125;<br>    &#125;while(n&lt;=0||r&lt;0||n&lt;r);<br> <br>    printf(&quot;%d个整数中取%d个整数的组合数为%d。\n&quot;,n,r,combination(n,r));<br> <br>    return 0;<br>&#125;<br><br>int combination(int n,int r)<br>&#123;<br>if (r == 1)<br>&#123;<br>return n;<br>&#125;<br>else if (r==0 || r==n)<br>&#123;<br>return 1;<br>&#125;<br>else<br>&#123;<br>return combination(n-1,r-1)+combination(n-1,r);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-8"><a href="#8-8" class="headerlink" title="8-8"></a>8-8</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br><br>int gcd(int x, int y) &#123;<br>if (y == 0) &#123;<br>return x;<br>&#125; else &#123;<br>return gcd(y, x % y);<br>&#125;<br>&#125;<br><br>int main() &#123;<br>int x = 48;<br>int y = 18;<br>int result = gcd(x, y);<br>printf(&quot;GCD of %d and %d is %d\n&quot;, x, y, result);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-9"><a href="#8-9" class="headerlink" title="8-9"></a>8-9</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int i=1,ch;<br>while((ch=getchar())!=EOF)&#123;<br>switch(ch)&#123;<br>case &#x27;\n&#x27;: i++; break;<br>&#125;<br>&#125;<br>printf(&quot;标准输入中出现的行数：%d&quot;,i);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-10"><a href="#8-10" class="headerlink" title="8-10"></a>8-10</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>int i,ch;<br>int cnt[10]=&#123;0&#125;;<br>while((ch=getchar())!=EOF)&#123;<br>if(ch&gt;=&#x27;0&#x27;&amp;&amp;ch&lt;=&#x27;9&#x27;)<br>cnt[ch-&#x27;0&#x27;]++;<br>&#125;<br>puts(&quot;数字字符串的出现次数&quot;);<br>for(i=0;i&lt;10;i++)&#123;<br>printf(&quot;%d:&quot;,i);<br>for (int j = 0; j &lt; cnt[i]; j++) &#123;<br>putchar(&#x27;*&#x27;);&#125;<br>putchar(&#x27;\n&#x27;);<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h2><h3 id="9-1"><a href="#9-1" class="headerlink" title="9-1"></a>9-1</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int main()&#123;<br>char str[]=&quot;ABC\0DEF&quot;;<br>printf(&quot;字符串str为\&quot;%s\&quot;。\n&quot;,str);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-2"><a href="#9-2" class="headerlink" title="9-2"></a>9-2</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br><br>int main()<br>&#123;<br>char s[]=&quot;ABC&quot;;<br><br>    s[0]=&#x27;\0&#x27;;<br> <br>    printf(&quot;字符串s为%s。\n&quot;,s);<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-3"><a href="#9-3" class="headerlink" title="9-3"></a>9-3</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>#define NUMBER 10<br>int myStrcmpWithoutPointers(const char str1[], const char str2[]) &#123;<br>int i = 0;<br><br>    while (str1[i] != &#x27;\0&#x27; &amp;&amp; str2[i] != &#x27;\0&#x27;) &#123;<br>        if (str1[i] != str2[i]) &#123;<br>            return str1[i] - str2[i];<br>        &#125;<br>        i++;<br>    &#125;<br>    return str1[i] - str2[i];<br>&#125;<br>int main()<br>&#123;<br>int i;<br>char s[NUMBER][128];<br>for(i=0;i&lt;NUMBER;i++)&#123;<br>printf(&quot;s[%d]:&quot;,i);<br>scanf(&quot;%s&quot;,s[i]);<br>if (myStrcmpWithoutPointers(s[i], &quot;$$$$$&quot;) == 0)<br>break;<br>&#125;<br>for(i=0;i&lt;NUMBER;i++)<br>printf(&quot;s[%d]=\&quot;%s\&quot;\n&quot;,i,s[i]);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-4"><a href="#9-4" class="headerlink" title="9-4"></a>9-4</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br><br>void null_string(char s[])&#123;<br>s[0] = &#x27;\0&#x27;;<br>&#125;<br><br>int main()&#123;<br>char s[] = &quot;abc&quot;;<br>null_string(s);<br>printf(&quot;该字符串为: \&quot;%s\&quot;&quot;, s);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-5"><a href="#9-5" class="headerlink" title="9-5"></a>9-5</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int  str_char(const  char s[],int c)&#123;<br>int i=0;<br>while(s[i])<br>&#123;<br>if(s[i]==&#x27;c&#x27;)&#123;<br>return i;<br>&#125;<br>i++;<br>&#125;<br>return -1;<br>&#125;<br>int main() &#123;<br>char s[] = &quot;example&quot;;<br>int index = str_char(s, &#x27;c&#x27;);<br>if (index != -1) &#123;<br>printf(&quot;字符 &#x27;c&#x27; 在字符串中的索引是 %d\n&quot;, index);<br>&#125; else &#123;<br>printf(&quot;字符 &#x27;c&#x27; 未在字符串中找到\n&quot;);<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-6"><a href="#9-6" class="headerlink" title="9-6"></a>9-6</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int  str_char(const  char s[],int c)&#123;<br>int i=0,j=0;<br><br>    while(s[i])<br>    &#123;<br>        if(s[i]==&#x27;c&#x27;)&#123;<br>            j+=1;<br>        &#125;<br>        i++;<br>    &#125;<br>    return j;<br>&#125;<br>int main() &#123;<br>char s[] = &quot;cexcamplec&quot;;<br>int index = str_char(s, &#x27;c&#x27;);<br>if (index != 0) &#123;<br>printf(&quot;字符 &#x27;c&#x27; 有： %d个\n&quot;, index);<br>&#125; else &#123;<br>printf(&quot;字符 &#x27;c&#x27; 未在字符串中找到\n&quot;);<br>&#125;<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-7"><a href="#9-7" class="headerlink" title="9-7"></a>9-7</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br><br>void put_stringn(const char s[], int n) &#123;<br>for (int i = 0; i &lt; n; i++) &#123;<br>for (int j = 0; s[j] != &#x27;\0&#x27;; j++) &#123;<br>putchar(s[j]);<br>&#125;<br>&#125;<br>&#125;<br><br>int main() &#123;<br>int j;<br>char str[128];<br>printf(&quot;请输入字符: &quot;);<br>scanf(&quot;%s&quot;, str);<br>printf(&quot;要重复多少次：&quot;);<br>scanf(&quot;%d&quot;, &amp;j);<br>printf(&quot;%s字符重复%d次为:&quot;, str, j);<br><br>    put_stringn(str, j);<br>    printf(&quot;.\n&quot;);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-8-p"><a href="#9-8-p" class="headerlink" title="9-8 p&gt;"></a>9-8 p&gt;</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>void put_string(const char s[])<br>&#123;int len=0;<br>while(s[len])<br>len++;<br>int i;<br>for(i=len-1;i&gt;=0;i--)<br>putchar(s[i]);<br>&#125;<br><br><br>int main()<br>&#123;<br>char str[128];<br><br>    printf(&quot;请输入一个字符串：&quot;);<br>    scanf(&quot;%s&quot;,str);<br> <br>    printf(&quot;字符串\&quot;%s\&quot;逆向后：&quot;,str);<br>    put_string(str);<br> <br>    return 0;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="9-9"><a href="#9-9" class="headerlink" title="9-9"></a>9-9</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>#define NUMBER 128<br><br>void put_stringn(char s[]) &#123;<br>int len = 0;<br><br>    while (s[len] != &#x27;\0&#x27;) &#123;<br>        len++;<br>    &#125;/*计算字符串长度*/<br> <br>    for (int i = 0; i &lt; len / 2; i++) &#123;<br>        char temp = s[i];<br>        s[i] = s[len - 1 - i];<br>        s[len - 1 - i] = temp;<br>    &#125;<br>&#125;<br><br>int main() &#123;<br>char str[NUMBER];<br>printf(&quot;请输入字符: &quot;);<br>scanf(&quot;%s&quot;, str);<br>printf(&quot;%s字符的逆向显示：&quot;, str);<br><br>    put_stringn(str);<br> <br>    printf(&quot;%s.\n&quot;, str);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-10"><a href="#9-10" class="headerlink" title="9-10"></a>9-10</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>void del_digit(char s[])<br>&#123;<br>int i = 0;<br>int j = 0;<br>char temp[128] = &#123;0&#125;;<br><br>    while (s[i])<br>    &#123;<br>        if (s[i] &lt; &#x27;0&#x27; || s[i] &gt; &#x27;9&#x27;)<br>        &#123;<br>            temp[j] = s[i];<br>            j++;<br>        &#125;<br>        i++;<br>    &#125;<br> <br>    j = 0;<br>    while (temp[j])<br>    &#123;<br>        s[j] = temp[j];<br>        j++;<br>    &#125;<br>    s[j] = &#x27;\0&#x27;;<br>&#125;<br><br><br>int main()<br>&#123;<br>int i;<br>char str[128];<br><br>    printf(&quot;请输入一个字符串：&quot;);<br>    scanf(&quot;%s&quot;, str);<br> <br>    del_digit(str);<br>    printf(&quot;删除数字后：%s\n&quot;, str);<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-11"><a href="#9-11" class="headerlink" title="9-11"></a>9-11</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>#define NUMBER1 10<br>#define NUMBER2 128<br>void put_strary(const char s[][NUMBER2], int n) &#123;<br>int i;<br>for (i = 0; i &lt; n; i++)<br>printf(&quot;s[%d]=\&quot;%s\&quot;\n&quot;, i, s[i]);<br>&#125;<br><br>int myStrcmpWithoutPointers(const char str1[], const char str2[]) &#123;<br>int i = 0;<br>while (str1[i] != &#x27;\0&#x27; &amp;&amp; str2[i] != &#x27;\0&#x27;) &#123;<br>if (str1[i] != str2[i]) &#123;<br>return str1[i] - str2[i];<br>&#125;<br>i++;<br>&#125;<br>return str1[i] - str2[i];<br>&#125;<br><br>int main() &#123;<br>int i;<br>char cs[NUMBER1][NUMBER2];<br>for (i = 0; i &lt; NUMBER1; i++) &#123;<br>printf(&quot;s[%d]:&quot;, i);<br>scanf(&quot;%s&quot;, cs[i]);<br>if (myStrcmpWithoutPointers(cs[i], &quot;$$$$$&quot;) == 0)<br>break;<br>&#125;<br>put_strary(cs, i);<br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-12"><a href="#9-12" class="headerlink" title="9-12"></a>9-12</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>int str_len(char s[])&#123;<br>int len=0 ;<br>while(s[len]!=&#x27;\0&#x27;)&#123;<br>len++;<br>&#125;<br>return len;<br>&#125;<br>void rev_string(char s[][128], int n) &#123;<br>int i, j;<br>for (i = 0; i &lt; n; i++) &#123;<br>int len = str_len(s[i]);<br>for (j = 0; j &lt; len / 2; j++) &#123;<br>char temp = s[i][j];<br>s[i][j] = s[i][len - 1 - j];<br>s[i][len - 1 - j] = temp;<br>&#125;<br>&#125;<br>&#125;<br>int main() &#123;<br>char strings[][128] = &#123;&quot;SEC&quot;, &quot;ABC&quot;&#125;;<br>int num_strings = 2;<br><br>    rev_string(strings, num_strings);<br> <br>    for (int i = 0; i &lt; num_strings; i++) &#123;<br>        printf(&quot;%s\n&quot;, strings[i]);<br>    &#125;<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h2><h3 id="10-1"><a href="#10-1" class="headerlink" title="10-1"></a>10-1</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br>void adjust_point(int *n)&#123;<br>if(*n&lt;0)<br>*n=0;<br>if(*n&gt;100)<br>*n=100;<br>&#125;<br>int main()&#123;<br>int i;<br>printf(&quot;请输入一个数字：&quot;);<br>scanf(&quot;%d&quot;,&amp;i);<br>adjust_point(&amp;i);<br>printf(&quot;该数字为：%d&quot;,i);<br>return 0;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>10-2</p><h3 id="10-3"><a href="#10-3" class="headerlink" title="10-3"></a>10-3</h3><figure class="highlight plaintext"><figcaption><span>bush</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs [c]">#include &lt;stdio.h&gt;<br><br>void sort3(int *n1,int *n2,int *n3)<br>&#123;<br>int temp;<br><br>    if(*n1&gt;*n2)<br>    &#123;<br>        temp=*n1;<br>        *n1=*n2;<br>        *n2=temp;<br>    &#125;<br> <br>    if(*n1&gt;*n3)<br>    &#123;<br>        temp=*n1;<br>        *n1=*n3;<br>        *n3=temp;<br>    &#125;<br> <br>    if(*n2&gt;*n3)<br>    &#123;<br>        temp=*n2;<br>        *n2=*n3;<br>        *n3=temp;<br>    &#125;<br>&#125;<br><br><br>int main()<br>&#123;<br>int a,b,c;<br><br>    printf(&quot;整数a：&quot;);scanf(&quot;%d&quot;,&amp;a);<br>    printf(&quot;整数b：&quot;);scanf(&quot;%d&quot;,&amp;b);<br>    printf(&quot;整数c：&quot;);scanf(&quot;%d&quot;,&amp;c);<br> <br>    sort3(&amp;a,&amp;b,&amp;c);<br> <br>    printf(&quot;a = %d\nb = %d\nc = %d\n&quot;,a,b,c);<br> <br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+github+Zeabur搭建博客</title>
    <link href="/2024/09/15/hexo+github/"/>
    <url>/2024/09/15/hexo+github/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>看了一个学长的发出的博客，自己也想弄一个博客，但经历十分的曲折，挑灯夜战到了五点，本来是一件很简单的事，但是总有些小毛病，<br>所以我想总结我的经历，可以给别人一个起到帮助的作用。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li><a href="https://nodejs.org/">Node.js  必需的环境 安装最新版Node.js</a></li><li><a href="http://git-scm.com/">git 必需的环境 版本控制，管理代码</a></li><li><a href="https://npmmirror.com/">npmmirror 源淘宝NPM镜像源</a></li><li><a href="https://hexo.io/"> Hexo 博客官网,可以查找更多主题</a></li><li><a href="http://localhost:4000/2024/07/31/AI%20era/Hexo/GitHub.conm>">Github 需要有一个GitHub账号，用来保存你的代码。</a></li><li><a href="https://code.visualstudio.com/">Vscode 方便后续操作非必需</a></li></ul><p>如果github进不去的话，就自行上网找找如何修改DNS,并且改成阿里云的，或者可以下载个加速器给github加速一下，网上的方法有很多，就不仔细说了。</p><h2 id="正式安装hexo"><a href="#正式安装hexo" class="headerlink" title="正式安装hexo"></a>正式安装hexo</h2><p>首先检查一下环境有没有出错了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bush">node -v<br>npm -v<br>git -v<br>cnpm -v (这个可有可无）<br></code></pre></td></tr></table></figure><p>安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bush">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>如果网速不太行的话,选择下面其中一种方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bush">npm install -g cnpm --registry=https://registry.npmmirror.com<br>cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><h2 id="自选合适的目录，新建文件夹-初始化hexo项目"><a href="#自选合适的目录，新建文件夹-初始化hexo项目" class="headerlink" title="自选合适的目录，新建文件夹,初始化hexo项目"></a>自选合适的目录，新建文件夹,初始化hexo项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bush">cd floder <br>hexo init<br>cnpm install<br></code></pre></td></tr></table></figure><h2 id="选择并安装一个主题"><a href="#选择并安装一个主题" class="headerlink" title="选择并安装一个主题"></a>选择并安装一个主题</h2><ul><li>先选择一个hexo的主题，我用的是Fluid(也就是我疯狂出错的地方）- </li><li>访问主题的GitHub页面，可以选择下载压缩包，也可以用git下载,还可以用npm(cnpm)下载<br>详细的操作看<a href="https://hexo.fluid-dev.com/docs/">用户手册</a><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> <span class="hljs-keyword">master</span> <span class="hljs-title">https</span>://github.com/fluid-dev/hexo-theme-fluid.git<br></code></pre></td></tr></table></figure></li><li>到最折磨人的地方了，首先要下载hexo-pagination moment hexo-util @adobe&#x2F;css-tools nunjucks 这几个插件，这该死的vscode<br>没有给出出错在哪，只给了渲染失败，官方文档也没有写出来，下载完后就首先找到根目录下的_config.yml文件，然后找到theme这个,改成下面这样<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bush">theme:fluid<br>#下载的指令是(后面也可以空格然后接着打其他插件的名字也行）： <br>cnpm install moment<br></code></pre></td></tr></table></figure>然后弄一个新的_config.fluid.yml文件在根目录，然后找到下载的主题，然后将主题里面的_config.yml文件中的内容复制到_config.fluid.yml上，<br>大概率是不会出错了，不同的主题操作不一样的，所以还是的仔细看官方文档</li></ul><h2 id="本地生成和预览"><a href="#本地生成和预览" class="headerlink" title="本地生成和预览"></a>本地生成和预览</h2><ul><li><p>清理缓存（最后每一次启动前都清一下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bush">hexo clean<br>#简写：hexo cl<br></code></pre></td></tr></table></figure></li><li><p>生成静态文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span><br></code></pre></td></tr></table></figure></li><li><p>启动本地的服务器,在浏览器中访问<a href="http://localhost:4000查看效果。">http://localhost:4000查看效果。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bush">hexo s<br></code></pre></td></tr></table></figure></li></ul><p>如果前面的步骤都没有出错的话，恭喜你快要搭建一个属于自己的线上的blog了  </p><h2 id="推送或部署到GitHub"><a href="#推送或部署到GitHub" class="headerlink" title="推送或部署到GitHub"></a>推送或部署到GitHub</h2><ul><li><p>在github上创建一个仓库</p></li><li><p>安装hexo部署插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bush">官方源<br>npm install hexo-deployer-git --save<br>阿里源<br>cnpm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>配置Hexo部署信息，在_config.yml中规范写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bush">deploy:<br>type:git<br>repo:https://你的访问令牌@github.com/你的用户名/你的仓库名.git #直接复制你的仓库的网址就好了<br>branch:main<br></code></pre></td></tr></table></figure></li><li><p>推到Github:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bush">hexo d<br></code></pre></td></tr></table></figure></li></ul><h2 id="使用免费容器进行部署zeabur这个很简单的，我就不过说名了-自行上网找吧"><a href="#使用免费容器进行部署zeabur这个很简单的，我就不过说名了-自行上网找吧" class="headerlink" title="使用免费容器进行部署zeabur这个很简单的，我就不过说名了,自行上网找吧"></a>使用免费容器进行部署zeabur这个很简单的，我就不过说名了,自行上网找吧</h2><h2 id="一些提示和总结"><a href="#一些提示和总结" class="headerlink" title="一些提示和总结"></a>一些提示和总结</h2><p><strong>_post文件夹中必须要有一篇以上的md文件，不然的话，你的辛苦弄好的blog就要gg了（别问我是咋知道的</strong><br>其余的一些操作就看<a href="https://hexo.fluid-dev.com/docs/">官方文档</a>，如何写的blog的话,可以像htmll那样写，或者是markdown<br>如果以上步骤都没有出现差误，你应该是可以安装并且配置好你的blog的，并且别人可以通过网址来访问你的blog</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
